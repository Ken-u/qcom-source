#ifndef DS_NET_DEF_IDL
#define DS_NET_DEF_IDL

/*qidl copyright nested=false
============================================================================
               Copyright (c) 2008-2010 Qualcomm Technologies, Inc.
                            All Rights Reserved.
                    Qualcomm Technologies Confidential and Proprietary
============================================================================
*/

#include "AEEStdDef.idl"

/**
 * ds Net module.
 * This module groups all the general Net types and constants.
 */
module ds
{
   module Net
   {
      /**
       * EventType: Event Type declaration. All Network subsystem interfaces that provide registration for events
       * use this event type to declare their events.
       * The specific events are declared in each Network subsystem interface.
       */
      typedef long EventType;

      /**
       * Iface ID identifies the underlying interface bound to an INetwork
       * object.
       * @See INetwork::IfaceId
       * Iface ID is relevant for socket options SO_TX_IFACE and IP_RECVIF
       * as well as for using iface id as scopeId in IPv6 addresses.
       */
      typedef unsigned long IfaceIdType;
      const IfaceIdType INVALID_IFACE_ID = 0x0; 

      /**
       * IfaceGroup: Network interface specification in network policy. All interfaces that belong
       * to the specified group shall be compatible to the policy.
       */
      typedef long IfaceGroupType;
      module IfaceGroup                       
      {
         const IfaceGroupType GRP_ANY_DEFAULT = 0x0001; /* Default group specification (used if no group is specified) */
         const IfaceGroupType GRP_WWAN        = 0x0002; /* Any interface with WAN capability (WLAN, 3GPP, or 3GPP2) */         
         const IfaceGroupType GRP_BCAST_MCAST = 0x0008; /* Any Broadcast/Multicast interface */
         const IfaceGroupType GRP_NET_3GPP    = 0x0010; /* Any UMTS interface */
         const IfaceGroupType GRP_NET_3GPP2   = 0x0020; /* Any CDMA 1x interface */         
      };
      
      typedef long IfaceNameType;
      module IfaceName
      {
         const IfaceNameType  IFACE_CDMA_SN     = 0x8001;
         const IfaceNameType  IFACE_CDMA_AN     = 0x8002;
         const IfaceNameType  IFACE_UMTS        = 0x8004;
         const IfaceNameType  IFACE_SIO         = 0x8008;
         const IfaceNameType  IFACE_CDMA_BCAST  = 0x8010; //BCMCS
         const IfaceNameType  IFACE_WLAN        = 0x8020;
         const IfaceNameType  IFACE_FLO         = 0x8080;
         const IfaceNameType  IFACE_DVBH        = 0x8100;
         const IfaceNameType  IFACE_STA         = 0x8200;
         const IfaceNameType  IFACE_IPSEC       = 0x8400;
         const IfaceNameType  IFACE_LOOPBACK    = 0x8800;
         const IfaceNameType  IFACE_RESERVED1   = 0x8801; //This iface name is reserved
         const IfaceNameType  IFACE_IWLAN_3GPP  = 0x8802;
         const IfaceNameType  IFACE_IWLAN_3GPP2 = 0x8804;
         const IfaceNameType  IFACE_SLIP        = 0x8810;
         const IfaceNameType  IFACE_UICC        = 0x8820;
      };

      /**
       * These info codes provide information of dormancy related conditions.
       */
      typedef long DormancyInfoCodeType;
      module DormancyInfoCode
      {
         const DormancyInfoCodeType QDS_NOT_SPECIFIED = 201;

        /**
         * BUSY: Resuming Network connection from Dormancy failed since the 
         * network is busy (either network congestion does not allow the
         * connection to be resumed or because network resources for the
         * specific application class are not currently available.
         * The application should decide on the appropriate retry mechanism.
         */
         const DormancyInfoCodeType QDS_BUSY = 202;
      };

      // Dormant reasons
      typedef long DormantReasonType;
      module DormantReason
      {
        const DormantReasonType QDS_NONE = 1;         
      };

      // INAddrType and INPortType are in NETWORK BYTE ORDER.
      typedef octet  INAddrType[4];   
      typedef octet  INPortType[2];

   };// module Net
};// module ds

#endif /* #ifdef DS_NET_DEF_IDL */

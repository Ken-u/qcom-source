#ifndef PS_SOCK_PLATFORM_EVENTDEFS_H
#define PS_SOCK_PLATFORM_EVENTDEFS_H
//TODO Change this
/*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*

                      S O C K P L A T F O R M L I B . H

GENERAL DESCRIPTION
  This header file defines the sockets platform library for all targets (WM,
  Linux, AMSS etc.). Any target which wants to support ds Sockets API shall
  implement this library

INITIALIZATION AND SEQUENCING REQUIREMENTS
  None

Copyright (c) 2008-2010 by Qualcomm Technologies, Inc.  All Rights Reserved.
*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*/
/*===========================================================================

                        EDIT HISTORY FOR MODULE

  $Header: //source/qcom/qct/modem/datamodem/interface/dssock/rel/11.03/inc/PS_Sock_Platform_EventDefs.h#1 $
  $DateTime: 2011/06/17 12:02:33 $ $Author: zhasan $

===========================================================================*/
/*===========================================================================

                     INCLUDE FILES FOR MODULE

===========================================================================*/
#include "comdef.h"
#include "customer.h"
#include "target.h"

/*===========================================================================

                      PUBLIC DATA DECLARATIONS

===========================================================================*/
namespace PS
{
  namespace Sock
  {
    namespace Platform
    {
      typedef uint32  EventType;

      /** List of events supported by a platform.

        This namespace defines the events that could be generated by a
        platform. Some events are not applicable to non-AMSS platforms.

        This namespace is defined as a bit mask and each event represents a
        bit. A client can register for a set of events by enabling
        corresponding bits in an integer.

        @see PS::Sock::Platform::AsyncSelect
      */
      namespace Event
      {
        const EventType  READ                = 0;
        /**< Posted when data is availble on a socket */
        const EventType  WRITE               = 1;
        /**< Posted when data can be written to a socket */
        const EventType  CLOSE               = 2;
        /**< Posted when a socket is closed */
        const EventType  ACCEPT              = 3;
        /**< Posted when a new incoming TCP connection is established on a
          listening socket */
        const EventType  PLATFORM_ENABLED    = 4;
        /**< Posted when resources are available on a platform to perform
         * more operations. Unlike other events, this is a global event and
         * applies to all sockets */
      }
    } /* namespace Platform */
  } /* namespace Sock */
} /* namespace PS */

#endif /* PS_SOCK_PLATFORM_EVENTDEFS_H */

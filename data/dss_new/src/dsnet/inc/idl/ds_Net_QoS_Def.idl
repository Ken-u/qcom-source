#ifndef DS_NET_QOS_DEF_IDL
#define DS_NET_QOS_DEF_IDL

/*qidl copyright nested=false
============================================================================
               Copyright (c) 2008-2010 Qualcomm Technologies, Inc.
                            All Rights Reserved.
                    Qualcomm Technologies Confidential and Proprietary
============================================================================
*/

#include "AEEStdDef.idl"

#include "ds_Net_Def.idl"

/**
 * ds Net QoS Def module.
 * This module groups all the QoS types and constants.
 */
module ds
{
   module Net
   {
      module QoSEvent
      {
         /* 
          * Events that can be registered both on Secondary and Default QoS
          */
         const EventType QDS_EV_MODIFY_RESULT     = 0x0106dee5;
         const EventType QDS_EV_INFO_CODE_UPDATED = 0x0106dee8;
      };

      typedef long QoSInfoCodeType;
      module QoSInfoCode
      {
         const QoSInfoCodeType QDS_NOT_SPECIFIED                = 0;
         const QoSInfoCodeType QDS_INVALID_PARAMS               = 3;
         const QoSInfoCodeType QDS_INTERNAL_CALL_ENDED          = 4;
         const QoSInfoCodeType QDS_INTERNAL_ERROR               = 5;
         const QoSInfoCodeType QDS_INSUFFICIENT_LOCAL_RESOURCES = 6;
         const QoSInfoCodeType QDS_TIMED_OUT_OPERATION          = 7;
         const QoSInfoCodeType QDS_INTERNAL_UNKNOWN_CAUSE_CODE  = 8;
         const QoSInfoCodeType QDS_INTERNAL_MODIFY_IN_PROGRESS  = 9;
         const QoSInfoCodeType QDS_NOT_SUPPORTED                = 129;
         const QoSInfoCodeType QDS_NOT_AVAILABLE                = 130;
         const QoSInfoCodeType QDS_NOT_GUARANTEED               = 131;
         const QoSInfoCodeType QDS_INSUFFICIENT_NET_RESOURCES   = 132;
         const QoSInfoCodeType QDS_AWARE_SYSTEM                 = 133;
         const QoSInfoCodeType QDS_UNAWARE_SYSTEM               = 134;
         const QoSInfoCodeType QDS_REJECTED_OPERATION           = 135;
         const QoSInfoCodeType QDS_WILL_GRANT_WHEN_RESUMED      = 136;
         const QoSInfoCodeType QDS_NETWORK_CALL_ENDED           = 137;
         const QoSInfoCodeType QDS_NETWORK_SVC_NOT_AVAILABLE    = 138;
         const QoSInfoCodeType QDS_NETWORK_L2_LINK_RELEASED     = 139;
         const QoSInfoCodeType QDS_NETWORK_L2_LINK_REESTAB_REJ  = 140;
         const QoSInfoCodeType QDS_NETWORK_L2_LINK_REESTAB_IND  = 141;
         const QoSInfoCodeType QDS_NETWORK_UNKNOWN_CAUSE_CODE   = 142;
      };

      typedef long QoSResultType;
      module QoSModifyResult
      {
         const QoSResultType QDS_ACCEPTED = 1;
         const QoSResultType QDS_REJECTED = 2;         
      };

      typedef unsigned long QoSModifyMaskType;
      module QoSModifyMask
      {
         const QoSModifyMaskType QDS_NONE           = 0x00;
         const QoSModifyMaskType QDS_RX_FLOW        = 0x01;
         const QoSModifyMaskType QDS_RX_SPEC_ADD    = 0x04;
         const QoSModifyMaskType QDS_TX_FLOW        = 0x08;
         const QoSModifyMaskType QDS_RX_ALL         = 0x0F;
         const QoSModifyMaskType QDS_TX_SPEC_ADD    = 0x20;
         const QoSModifyMaskType QDS_RX_FILTER      = 0x40;
         const QoSModifyMaskType QDS_TX_FILTER      = 0x80;
         const QoSModifyMaskType QDS_TX_ALL         = 0xF0;
         const QoSModifyMaskType QDS_ALL            = 0xFF;
         const QoSModifyMaskType QDS_RX_SPEC_DELETE = 0x100;
         const QoSModifyMaskType QDS_TX_SPEC_DELETE = 0x200;
      };

      typedef long QoSRequestOpCodeType;
      module QoSRequestOpCode
      {
         /* 
          * Create the QoS Session(s) and activate.
          */
         const QoSRequestOpCodeType QDS_REQUEST   = 0;

         /* 
          * Create the QoS Session(s) but do not activate.
          * The created QoS Session(s) can be later activated via 
          * IQoSManager::Resume
          */
         const QoSRequestOpCodeType QDS_CONFIGURE = 1;
      };
      
      typedef long QoSProfileIdType;
      module QoSProfileIds
      {
         const long MAX_SUPPORTED_PROFILES = 255;
      };

      struct QoSTXQueueLevelType 
      {
         long currentNewDataCnt; /**< Pending new data in the default watermark */
         long wmFreeCnt;         /**< Empty space on the queue (which is the hi watermark
                                      the pending new data in the queue) */
         long totalPendingCnt;   /**< Total amount of data pending New data +
                                      retransmission queue */
      };
   };// module Net
};// module ds

#endif /* #ifdef DS_NET_QOS_DEF_IDL */

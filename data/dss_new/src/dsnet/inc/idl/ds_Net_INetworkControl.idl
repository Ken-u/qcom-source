#ifndef DS_NET_INETWORKCONTROL_IDL
#define DS_NET_INETWORKCONTROL_IDL

/*qidl copyright nested=false
============================================================================
               Copyright (c) 2010 Qualcomm Technologies, Inc.
                            All Rights Reserved.
                    Qualcomm Technologies Confidential and Proprietary
============================================================================
*/

#include "ds_Net_Def.idl"

#include "ds_Net_IEventManager.idl"

module ds
{
   module Net
   {
      // Release reasons
      typedef long ReleaseReasonType;
      module ReleaseReason
      {
         const ReleaseReasonType QDS_NONE        = 1;
         const ReleaseReasonType QDS_LOW_BATTERY = 2;
      };

      // NetworkControl events
      module NetworkControlEvent
      {
         // Extended IP config event
         const EventType QDS_EV_EXTENDED_IP_CONFIG = 0x01074cd5;
      };

      // INetworkControl IID
      const AEEIID AEEIID_INetworkControl = 0x0109a89f;

      /**
       * ds NetworkControl interface.
       * This is an auxiliary interface to INetwork, supporting some advanced 
       * Network control operations.
       *
       * Events that can be registered on this interface via OnStateChange (as part of IEventManager interface): 
       * - ds::Net::NetworkControlEvent::EXTENDED_IP_CONFIG. Use GetDHCPRefreshResult to fetch the result of the DHCP refresh.
       */
      interface INetworkControl : IEventManager
      {
         /**
          * This function is used to explicitly put into dormancy the Default (Primary) Physical 
          * Link associated with this Network *regardless* of other entities that are using it 
          * when this function is called.
          * Dormancy on a link implies the releasing of the traffic channel and other air
          * interface channels to free up appropriate radio resources.
          * The link is automatically brought out of dormancy when applicable operations are
          * applied by users of this Network.
          * The state of the Network object should remain OPEN while the Physical
          * link is dormant.
          * This function requires special privilege. 
          * @param dormantReason Reason why attempting to put the network into dormancy.
          * @retval AEE_SUCCESS Request received successfully.
          * @retval AEE_EWOULDBLOCK Request is processed asynchronous. Application may fetch the
          *                         Physical Link object and register for Physical Link STATE_CHANGED
          *                         events in order to identify when the Physical Link is DOWN.          
          * @retval Other ds designated error codes might be returned.
          * @see ds_Errors_Def.idl.
          */
         AEEResult GoDormant(in DormantReasonType dormantReason);

         /**
          * This function is used to explicitly bring down the network connection.
          * Note that the applicable Network interface shall be brought down as well
          * *regardless* of other entities that are using it when this function is called.
          * This function is supported only for MONITORED mode Network objects. 
          * This function requires special privilege. 
          * @param nullReason Reason why attempting to tear down the network.
          * @retval AEE_SUCCESS Request received successfully.
          * @retval Other ds designated error codes might be returned.
          * @see ds_Errors_Def.idl.
          */
         AEEResult GoNull(in ReleaseReasonType nullReason);

         /**
          * This function used to refresh the DHCP configuration information.
          * @retval AEE_SUCCESS Request received successfully.
          * @retval Other ds designated error codes might be returned.
          * @see ds_Errors_Def.idl.
          */
         AEEResult RefreshDHCPConfigInfo();

         /**
          * This function is used to get the result of a DHCP config refresh.
          * @param res The result of the refresh: true if successful, false otherwise.
          * @retval AEE_SUCCESS Request received successfully.
          * @retval Other ds designated error codes might be returned.
          * @see ds_Errors_Def.idl.
          */
         AEEResult GetDHCPRefreshResult(rout boolean res);
      };
   };// module Net
};// module ds
#endif /* #ifndef DS_NET_INETWORKCONTROL_IDL */

#ifndef AEECCRITSECT_IDL
#define AEECCRITSECT_IDL
/*qidl copyright
==============================================================================

FILE: AEECCritSect.h

================================================================================
        Copyright 2004-2008 Qualcomm Technologies, Inc.
               All Rights Reserved.
            Qualcomm Technologies Proprietary/GTDR
==============================================================================*/

#include "AEEStdDef.idl"
const AEECLSID AEECLSID_CCritSect = 0x0101f752;

const AEECLSID AEECLSID_CInterProcessCritSect = 0x0105f63c;

/*qidl location=bottom target=all

================================================================================
   CLASS DOCUMENTATION
================================================================================

AEECLSID_CCritSect

Description:

   AEECLSID_CCritSect specifies a "critical section" object, also known as a
   "lock" or a "mutex".  Instances of this class are used to synchronize
   multiple threads that manipulate shared data.  Characeristics of this
   class include:

   1. Per-instance locking.  Each time CreateInstance() is called with this
      class ID, a new instance is returned.  Threads acquiring the instance
      (via ICritSect_Enter) will contend only with other threads acquiring
      the same instance.

   2. Priority inheritance.  When one thread holds the lock and
      a higher priority thread blocks on acquiring the lock (via
      ICritSect_Enter) the holding thread will execute with the higher
      priority until it releases the lock (via ICritSect_Leave).

   3. Re-entrancy.  Once a thread has acquired the lock, it "owns" the lock
      and may re-acquire the lock any number of times by calling
      ICritSect_Enter() again.  Such a thread will hold the lock until it
      releases by calling ICritSect_Leave() an equivalent number of times.
      Only the owning thread may release the lock.  Locks of this sort are
      sometimes termed "owned" or "counting" locks.

   4. Intra-process.  Instances are intended to be used by clients that
      reside in the same process.  Since ICritSect is a remotable interface,
      references to a single instance *can* be passed to other processes and
      the lock *can* be acquired and released by clients in other processes
      via remote invocation.  This is not recommended, however, because the
      instance will reside in the process that originally created it, and
      remote invocation will involve overheads (and a potential for deadlock
      when single-threaded environments are involved) that are avoidable by
      using AEECLSID_CInterProcessCritSect.

   MT-safe:  Instances of this class can be used safely by multiple threads.
      
Default Interface:
   ICritSect

Other Supported Interfaces:
   none

See Also:
   ICritSect, AEECLSID_CInterProcessCritSect

================================================================================

AEECLSID_CInterProcessCritSect

Description:

   AEECLSID_CInterProcessCritSect specifies a "critical section" (also known
   as "lock" or "mutex") object.  This class has the behavior of
   AEECLSID_CCritSect, except that it is designed for cases where different
   processes must share a lock.

Default Interface:
   ICritSect

Other Supported Interfaces:
   none

See Also:
   ICritSect, AEECLSID_CCritSect

================================================================================

*/

#endif //AEECCRITSECT_IDL


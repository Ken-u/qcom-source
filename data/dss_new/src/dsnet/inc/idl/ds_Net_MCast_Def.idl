#ifndef DS_NET_MCAST_DEF_IDL
#define DS_NET_MCAST_DEF_IDL

/*qidl copyright nested=false
============================================================================
               Copyright (c) 2010 Qualcomm Technologies, Inc.
                            All Rights Reserved.
                    Qualcomm Technologies Confidential and Proprietary
============================================================================
*/

#include "AEEStdDef.idl"

#include "ds_Addr_Def.idl"

module ds
{
   module Net
   {
     /** 
      * MCastRegStateType: Information on registration state of the MCast
      * Session.
      * Registration to the MCast service is triggered by the applicable API of
      * IMcastManager.
      * Once registration is triggered, the application should register for 
      * QDS_EV_REGISTRATION_STATE event on each applicable MCast Session object
      * in order to be notified on changes to the registration state.
      */
      typedef long MCastRegStateType;
      module MCastRegState
      {
        /**
         * SUCCESS: Registration to the MCast service was successful. The
         * application must have a socket bound to the same MCast IP and port
         * specified in the Join operation in order to receive the MCast data.
         * When MCast data arrives on the socket the application will be notified
         * via READ event on the socket.
         */
         const MCastRegStateType MCAST_REGISTER_SUCCESS = 1;

        /**
         * FAILURE: Registration to the MCast service has failed. This may
         * indicate a temporary failure based on the info code that may be
         * obtained via IMCastSession::TechStatusInfoCode. If the failure
         * is permanent, the application should call IMCastSession::Leave.
         */
         const MCastRegStateType MCAST_REGISTER_FAILURE = 2;

        /**
         * DEREGISTERED: the application has been de-registered from the MCast
         * service. The reason is indicated by the info code that may be
         * obtained via IMCastSession::TechStatusInfoCode. There is no need to
         * call IMCastSession::Leave as the application has been automatically
         * de-registered. The MCastSession object is not usable anymore and
         * should be released.
         */
         const MCastRegStateType MCAST_DEREGISTERED     = 3;
      };

      typedef long MCastInfoCodeType;
      module MCastInfoCode
      {
         const MCastInfoCodeType IC_NOT_SPECIFIED                                      = 0;
         const MCastInfoCodeType BCMCS_FLOW_STATUS_CANCELLED                           = 600;
         const MCastInfoCodeType BCMCS_FLOW_STATUS_UNABLE_TO_MONITOR                   = 601;
         const MCastInfoCodeType BCMCS_FLOW_STATUS_REQUESTED                           = 611;
         const MCastInfoCodeType BCMCS_FLOW_STATUS_TIMEOUT                             = 602;
         const MCastInfoCodeType BCMCS_FLOW_STATUS_LOST                                = 603;
         const MCastInfoCodeType BCMCS_FLOW_STATUS_SYS_UNAVAILABLE                     = 604;
         const MCastInfoCodeType BCMCS_FLOW_STATUS_AN_REJECT_NOT_AVAILABLE             = 606;
         const MCastInfoCodeType BCMCS_FLOW_STATUS_AN_REJECT_NOT_TRANSMITTED           = 607;
         const MCastInfoCodeType BCMCS_FLOW_STATUS_AN_REJECT_INVALID_AUTH_SIG          = 608;
         const MCastInfoCodeType BCMCS_FLOW_STATUS_UNAVAILABLE                         = 605;
         const MCastInfoCodeType BCMCS_FLOW_STATUS_NO_MAPPING                          = 609;
         const MCastInfoCodeType BCMCS_FLOW_STATUS_ID_NOT_FOUND_FOR_GIVEN_MULTICAST_IP = 610;
         const MCastInfoCodeType BCMCS_MAX_FLOWS_REACHED                               = 612;
         const MCastInfoCodeType BCMCS_JOIN_REQ_IN_PROGRESS                            = 613;
         const MCastInfoCodeType BCMCS_FLOW_REQUEST_SENT                               = 614;
         const MCastInfoCodeType BCMCS_FLOW_STATUS_MAX_MONITORED_FLOWS                 = 615;
         const MCastInfoCodeType BCMCS_FLOW_STATUS_MONITORED                           = 616;
         const MCastInfoCodeType BCMCS_REGISTRATION_SUCCESS                            = 617;
         const MCastInfoCodeType BCMCS_REGISTRATION_NOT_ALLOWED                        = 618;
         const MCastInfoCodeType BCMCS_REGISTRATION_FAILED                             = 619;
         const MCastInfoCodeType BCMCS_FLOW_DEREGISTERED                               = 620;
         const MCastInfoCodeType FLO_IP_OR_PORT_NOT_SUPPORTED                          = 1051;
         const MCastInfoCodeType FLO_NO_AUTHORIZATION                                  = 1052;
         const MCastInfoCodeType FLO_NO_SYSTEM_COVERAGE                                = 1053;
         const MCastInfoCodeType FLO_MAX_FLOW_REACHED                                  = 1054;
         const MCastInfoCodeType DVBH_IP_OR_PORT_NOT_FOUND                             = 1101;
         const MCastInfoCodeType DVBH_SYSTEM_UNAVAILABLE                               = 1102;
         const MCastInfoCodeType DVBH_BAD_REQUEST                                      = 1103;
         const MCastInfoCodeType DVBH_REQUEST_CONFLICT                                 = 1104;
         const MCastInfoCodeType DVBH_DUP_REQUEST                                      = 1105;
         const MCastInfoCodeType DVBH_MAX_FLOWS_REACHED                                = 1106;
         const MCastInfoCodeType MCAST_INFO_CODE_RESERVED1                             = 1151;    
      };

      struct MCastStateChangedType 
      {         
         MCastRegStateType regState;
         MCastInfoCodeType infoCode;
      };      
      
      /**
       * MCastJoinFlagsType: flags specifying whether MCast Join operation 
       * should also perform registration or not.
       */
      typedef long MCastJoinFlagsType;
      module MCastJoinFlags
      {
         /**
          * REG_SETUP_ALLOWED: The system shall trigger registration process
          * as part of JoinBundle API processing
          */
         const MCastJoinFlagsType REG_SETUP_ALLOWED       = 0;

         /**
          * REG_SETUP_NOT_ALLOWED: Do not perform registration as part of the 
          * Join request. The application shall take care to call the
          * RegisterBundle API when it is ready to triger the registration
          * process for a session..
          */
         const MCastJoinFlagsType REG_SETUP_NOT_ALLOWED   = 1;         
      };
            
   };// module Net
};// module ds
#endif /* #ifdef DS_NET_MCAST_DEF_IDL */

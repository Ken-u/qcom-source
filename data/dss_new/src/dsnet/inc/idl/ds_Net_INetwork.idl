#ifndef DS_NET_INETWORK_IDL
#define DS_NET_INETWORK_IDL

/*qidl copyright nested=false
============================================================================
               Copyright (c) 2008-2010 Qualcomm Technologies, Inc.
                            All Rights Reserved.
                    Qualcomm Technologies Confidential and Proprietary
============================================================================
*/

#include "ds_Addr_Def.idl"

#include "ds_Net_Def.idl"
#include "ds_Net_DownReasons_Def.idl"
#include "ds_Net_IEventManager.idl"
#include "ds_Net_IPhysLink.idl"

module ds
{
   module Net
   {
      // Network events
      module NetworkEvent
      {
         /**
          * Data network state change
          */
         const EventType QDS_EV_STATE_CHANGED         = 0x0106e60f;

         /**
          * IP address change
          */
         const EventType QDS_EV_IP_ADDR_CHANGED       = 0x0106e610;

         /**
          * Outage (mobile handoff) event
          */
         const EventType QDS_EV_OUTAGE                = 0x0106e614;

         /**
          * // RF Condition event
          */
         const EventType QDS_EV_RF_CONDITIONS_CHANGED = 0x0106e617;
      };

      // Network States
      typedef long NetworkStateType;
      module NetworkState
      {
         /**
          * CLOSED: When an ACTIVE MODE Network object reaches this state it
          *         should be released. 
          *         MONITORED MODE Network object shall be in this state when
          *         the network connection it is monitoring is down.
          *         It is valid for MONITORED MODE Network object to remain in
          *         this state (as the application may wish to continue
          *         monitoring the network interface).
          *         Most operations invoked while the Network object is in this
          *         state will fail.
          *         @See INetwork::Stop
          */
         const NetworkStateType QDS_CLOSED            = 0x02;

         /**
          * OPEN_IN_PROGRESS: An ACTIVE MODE Network object may be in this
          *                   state upon its creation.
          *                   MONITORED MODE Network object shall be in this
          *                   state when the network connection it is monitoring 
          *                   is in the process of being established.          
          *                   Most operations invoked while the Network object
          *                   is in this state will fail.
          */
         const NetworkStateType QDS_OPEN_IN_PROGRESS  = 0x04;

         /**
          * OPEN: This is the normal state of an ACTIVE MODE Network object.
          *       MONITORED MODE Network object shall be in this state when
          *       the network connection it is monitoring is established.          
          *       @See INetworkControl::GoDormant
          */
         const NetworkStateType QDS_OPEN              = 0x20;

         /**
          * CLOSE_IN_PROGRESS: An ACTIVE MODE Network object may be in this
          *                    state after Stop was called.
          *                    A MONITORED MODE Network object may be in this
          *                    state after GoNull was called, or, in general,
          *                    when the network connection it is monitoring
          *                    is in the process of being torn down.
          *                    Most operations invoked while the Network object
          *                    is in this state will fail.
          */
         const NetworkStateType QDS_CLOSE_IN_PROGRESS = 0x40;
         
         /**
          * LINGERING: The underlying network interface is not used anymore by
          *            any client, but it stays in OPEN state for a while to
          *            optimize a scenario where a client starts using it again
          *            closely after the last client stopped using it.
          *            This state is applicable only for MONITORED MODE Network
          *            objects.
          */
         const NetworkStateType QDS_LINGERING         = 0x80;
      };

      // RF conditions
      typedef long RFConditionType;
      module RFCondition
      {
         const RFConditionType QDS_BAD       = 1;
         const RFConditionType QDS_GOOD      = 2;         
      };

      typedef octet DomainName[256];

      typedef long OutageStateType;
      module OutageState
      {
         /**
          * The state of network outage cannot be determined and information
          * regarding expected outage cannot be provided.
          * The timeToOutage provided is not valid and should be ignored.
          */
         const OutageStateType QDS_INVALID   = 0;

         /**
          * The OutageInfo provided is valid.
          */
         const OutageStateType QDS_VALID     = 1;

         /**
          * By the time the application has queried for the network outage
          * information, the outage has actually already started.
          * i.e. The device is currently in network outage state.
          */
         const OutageStateType QDS_STARTED   = 2;

         /**
          * By the time the application has queried for the network outage
          * information, the outage has already occurred and finished.
          * The device is not in network outage state anymore
          */
         const OutageStateType QDS_EXPIRED   = 3;
      };
      // struct holding information regarding outage events
      struct OutageInfoType
      {
         OutageStateType  state;
         long            timeToOutage;
         long            duration;
      };

      module HWAddress
      {
         const long QDS_MAX_HW_ADDR = 6;
      };

      struct HWAddressType
      {
         octet len;
         octet hwAddr[HWAddress::QDS_MAX_HW_ADDR];
      };      

      //network stats
      struct NetworkStatsType
      {
         /**
          * Number of bytes received on this iface since the last reset. 
          */
         unsigned long long  bytesRX;
         /**
          * Number of bytes sent via this iface since the last reset. 
          */
         unsigned long long  bytesTX;
         /**
          * Total bytes transferred via this iface (since last reset upto now). 
          */
         unsigned long long  totalBytesTransferredSincePowerUp;
         /**
          * Number of bytes transferred via this iface during current connection. 
          */
         unsigned long long  bytesTransferred;
         /**
          * Number of packets received on this iface since the last reset. 
          */
         unsigned long       pktsRX;
         /**
          * Number of multicast packets received on this iface since the last reset. 
          */
         unsigned long       mcastPktsRX;
         /**
          * Number of dropped packets received on this iface since the last reset. 
          */
         unsigned long       pktsDroppedRX;
         /**
          * Number of packets sent via this iface since the last reset. 
          */
         unsigned long       pktsTX;
         /**
          * Number of multicast packets sent via this iface since the last reset. 
          */
         unsigned long       mcastPktsTX;
         /**
          * Number of dropped packets sent via this iface since the last reset. 
          */
         unsigned long       pktsDroppedTX;
                  /**
          * Time in seconds for this iface been open (since last reset upto now). 
          */
         unsigned long       totalOpenTimeSincePowerUp;
         /**
          * Time in seconds for this iface been active (between first IO after last reset upto last IO).
          */
         unsigned long       totalActiveTimeSincePowerUp;
         /**
          * Time in seconds since the last IO on this iface. 
          */
         unsigned long       lastUpStateTimeStamp;
         /**
          * Time in seconds since last time this iface was brought up. 
          */
         unsigned long       firstIOTimeStamp;
         /**
          * State of this iface since the last reset. 
          */
         unsigned short      state;
      };

      // INetwork IID
      const AEEIID AEEIID_INetwork = 0x0106c546;

      /**
       * ds Network interface.
       * This is the main interface for accessing information of a Data
       * Connection and controlling it.
       * A instance of this interface can only be created via INetworkFactory.
       * If created in ACTIVE mode, the network is brought up upon creation
       * (@See CreateNetwork). The ACTIVE object is not reusable once the
       * network has been shut down.
       * For creating QoS and MCast objects @See interface
       * ds_Net_INetworkExt.
       *
       * Events that can be registered on this interface via OnStateChange
       * (as part of IEventManager interface): 
       * - ds::Net::NetworkEvent::STATE_CHANGED. Use GetState to fetch the
       *   state information.
       * - ds::Net::NetworkEvent::IP_ADDR_CHANGED. Use GetIPAddr to fetch the
       *   IP address.
       * - ds::Net::NetworkEvent::OUTAGE. Use GetOutageInfo to fetch Outage
       *   information.
       * - ds::Net::NetworkEvent::RF_CONDITIONS_CHANGED. Use GetCurrRFCondition
       *   to fetch current RF conditions.
       */

      interface INetwork : IEventManager
      {
         typedef sequence<ds::IPAddrType> SeqIPAddrType;
         typedef sequence<DomainName>     SeqDomainNameType;

          /**
          * This attribute indicates the network state.
          * When an ACTIVE MODE Network object reach a CLOSED state it should
          * be released.
          * Operations invoked on such object in such state shall fail.
          * @see ds::Net::NetworkStateType.
          */
         readonly attribute NetworkStateType State;

         /**
          * This attribute indicates the name of the iface.          
          * @see ds::Network::IfaceName
          */         
         readonly attribute IfaceNameType IfaceName;

         /**
          * This attribute indicates an ID identifying the underlying interface
          * bound to this INetwork object.
          * Iface ID is relevant for socket options SO_TX_IFACE and IP_RECVIF
          * as well as for using iface id as scopeId in IPv6 addresses.          
          */         
         readonly attribute IfaceIdType IfaceId;

         /**
          * This attribute indicates the last network down reason.
          * This attribute has a valid value if the network went down at least
          * once.
          * @see ds::Net::NetDownReasonType.
          */         
         readonly attribute NetDownReasonType LastNetDownReason;

         /**
          * This attribute indicates the IP address of the local host or device,
          * in network byte order.          
          * @see ds::IPAddrType.
          */         
         readonly attribute ds::IPAddrType IPAddr;

         /**
          * This function is used to return all the DNS server addresses for
          * the network interface associated with the network object.
          * If available, the Primary DNS address shall always be specified
          * in the returned sequence before the Secondary address.
          * If only a single address is specified in the returned sequence
          * it should be treated as the Primary address.
          * @param addressList Buffer that holds the IP addresses.
          * @see SeqIPAddrType.
          * @retval AEE_SUCCESS Request received successfully.
          * @retval Other ds designated error codes might be returned.
          * @see ds_Errors_Def.idl.
          */
         AEEResult GetDNSAddr(rout SeqIPAddrType DNSAddresses);

         /**
          * This function returns the SIP (Session Initiation Protocol) server
          * Domain Names for this network.
          * @param sipServerDomainNames Buffer array that holds the SIP server
          * domain names.
          * @see SeqDomainNameType.
          * @retval AEE_SUCCESS Request received successfully.
          * @retval Other ds designated error codes might be returned.
          * @see ds_Errors_Def.idl.
          */
         AEEResult GetSIPServerDomainNames(rout SeqDomainNameType sipServerDomainNames);

         /**
          * This function returns the SIP (Session Initiation Protocol) server IP
          * addresses for this network.
          * @param sipServerAddresses Buffer array that holds the SIP server
          * addresses.
          * @see SeqIPAddrType.
          * @retval AEE_SUCCESS Request received successfully.
          * @retval Other ds designated error codes might be returned.
          * @see ds_Errors_Def.idl.
          */
         AEEResult GetSIPServerAddr(rout SeqIPAddrType sipServerAddresses);

         /**
          * This function is used to return the public IP address of the NAT iface, in
          * network byte order.
          * @param address Buffer that holds the IP address.
          * @see DS::IPAddrType.
          * @retval DS::SUCCESS Request received successfully.
          * @retval Other DS designated error codes might be returned.
          * @see DS_Errors.idl.
          */
         AEEResult GetNatPublicIPAddress(rout ds::IPAddrType address);

         /**
          * This attribute holds information of the latest outage event
          * associated with this data network.          
          * @see ds::Network::Outage::Info
          */         
         readonly attribute ds::Net::OutageInfoType OutageInfo;

         /**
          * This attribute indicates the IP Address family of this INetwork
          * object.
          */         
         readonly attribute AddrFamilyType AddressFamily;

         /**
          * This function returns the Domain Name Search List for this network.
          * @param domainNameSearchList Buffer array that holds the domain name
          * search list.
          * @see SeqDomainNameType.
          * @retval AEE_SUCCESS Request received successfully.
          * @retval Other ds designated error codes might be returned.
          * @see ds_Errors_Def.idl.
          */
         AEEResult GetDomainNameSearchList(rout SeqDomainNameType domainNameSearchList);

         /**
          * This attribute returns the IP Layer Maximum Transmission Unit
          * associated with this network.          
          */         
         readonly attribute long NetMTU;

         /**
          * This attribute indicates the HW address associated with this network.
          * @retval AEE_SUCCESS Request received successfully.
          * @retval QDS_EINVAL Iface does not support HW address.
          * @retval Other ds designated error codes might be returned.
          * @see ds::Net::Network::HWAddressType.
          */
         readonly attribute HWAddressType HWAddress;

         /**
          * This function is used to explicitly bring down the network
          * connection.
          * Note that the applicable Network interface shall be brought down as
          * well ONLY if no other entities are using it when this function is
          * called. Still, the application can expect STATE_CHANGED event if it
          * is registered. The application may hold the Network object after
          * calling this API, but it should release it once the Network moves 
          * to QDS_CLOSED state.          
          * 
          * @retval AEE_SUCCESS Request received successfully.
          * @retval Other ds designated error codes might be returned.
          * @see ds_Errors_Def.idl.
          */
         AEEResult Stop();

         /**
          * This attribute indicates the current RF condition.          
          * @see ds::Net::Network::RFConditionType.
          */
         readonly attribute RFConditionType CurrRFCondition;
         
         /**
          * This attribute points the Tx physical link object.          
          */         
         readonly attribute IPhysLink TXPhysLink;

         /**
          * This attribute points the Rx physical link object.          
          */                  
         readonly attribute IPhysLink RXPhysLink;

         /**
          * This attribute indicates the dormancy info code when default phys
          * link is dormant.
          */         
         readonly attribute DormancyInfoCodeType DormancyInfoCode;
         
         /**
          * This attribute provides info on Network related statistics
          * @param stats Output Network Statistics
          */         
         readonly attribute NetworkStatsType NetworkStatistics;
        
          /**
          * This attribute resets Network related statistics
          * @param None
          */         
          AEEResult ResetNetworkStatistics();

        /**
          * This function allows object extensibility.
          * For supported interfaces, objects implementing those interfaces may be 
          * fetched via this function. The supported interfaces are documented in
          * the DS_NET_NetworkFactory.bid file. GetTechObject-supported interface
          * does not imply any similar contract in regard to QueryInterface for the
          * respective interface.
          * Unlike IQI, the availability of a specific interface depends on some 
          * factors, e.g. current network type. Moreover, there is no guaranty 
          * for transitivity or symmetry. 
          * Note: 'interface' parameter will map to iid and techObj.
          * @param iid The interface that should be retrieved.
          * @param techObj On success, will contain the requested interface instance.
          * @retval ds::SUCCESS Interface retrieved successfully.
          * @retval AEE_ECLASSNOTSUPPORT Specified interface unsupported.
          * @retval Other ds designated error codes might be returned.
          * @see ds_Errors_Def.idl.
          */
         AEEResult GetTechObject(rout interface techObj);
      };
   };// module Net
};// module ds
#endif /* #ifndef DS_NET_INETWORK_IDL */

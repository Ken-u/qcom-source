#ifndef DSUMTSPDPREG_H
#define DSUMTSPDPREG_H

/** 
  @file dsumtspdpreg.h 
  @brief 
   Contains common data declarations and function prototypes for 
   accessing PDP profiles stored in EFS. 
*/
/* This file is used for the Modem Data API Reference Guide; there is 
   no feature Dual SIM. */

/* NOTE: For the output PDF generated using Doxygen and Latex, all file and 
         group descriptions are maintained in the Modem_Data_mainpage file. 
		 To change any of the the file/group text for the PDF, edit the 
		 Modem_Data_mainpage file, or contact Tech Pubs.

         The above description for this file is part of the "dsumtspdpreg" 
		 group description in the Modem_Data_mainpage file. 
*/

/* Additional description: 
  The data is stored in EFS as packed structures and are accessed 
  as a packed structure. The offsets of structures within the profiles
  and the associated parameters are relative to the other fields.

  If any additions/deletions are made to the profile parameters, care
  should be taken to check that all the offset macros are defined 
  correctly as well. 
   
  Compiler note:
  g++ does not respect packing of enums in cpp files, but allows packing in 
  c files. This causes struct mismatches. As a workaround, disable packing
  for gcc compiler. 
 */

/*===========================================================================

                        P D P   R E G I S T R Y   L I B R A R Y 

                          H E A D E R   F I L E


Copyright (c) 2003-2011 Qualcomm Technologies, Inc.
All Rights Reserved.
Qualcomm Technologies Confidential and Proprietary.
Export of this technology or software is regulated
by the U.S. Government. Diversion contrary to U.S. law prohibited.
===========================================================================*/


/*===========================================================================

                      EDIT HISTORY FOR FILE

  This section contains comments describing changes made to the module.
  Notice that changes are listed in reverse chronological order.

  $Header: //source/qcom/qct/modem/api/datamodem/main/latest/dsumtspdpreg.h#9 $ $DateTime: 2011/07/25 16:18:02 $ $Author: anupamad $

when       who     what, where, why
--------   ---     ---------------------------------------------------------
07/21/11   ttv     Added changes for source statistics descriptor.
05/09/11   asn     Added support for remoting missing routines in this API
02/24/11   hs      Added changes to support APN class in profile
02/11/11   ttv     Added changes for consolidated profile family.
01/29/11   pp      ps_pkt_info.h  - added back to fix backward comaptibility.
01/14/11   ss      Added support for Iface linger parameters.
11/18/10   ttv     Added support for DSDS.
10/28/10   llg     (Tech Pubs) Edited/added Doxygen comments and markup.
07/13/10   ss      Fixed Primary and Secondary DNS address offsets.
05/12/10   hs      Added support for APN Disable flag and Inactivity timer
01/04/10   vk      Removing certain macros from PDP reg API header file
                   that cause problems with autogenerated RPC stub code
10/22/09   ars     Fixed ARM compiler warnings
10/12/09   vk      PDP profile changes for IPv4v6 support
09/21/09   sch     Added DS_UMTS_PDP_AUTH_CHAP_OR_PAP to ds_umts_pdp_auth_enum_type
09/23/09   vd      Added support for LTE Qos.
08/13/09   vk      Initial merge of LTE support
06/25/09   vk      Removing certain deprecated macros in pdp reg api
05/19/09   vk      Defeaturization of PDP registry for CMI
10/22/08   jsh     Added meta-comments, union discriminators - as required by HTORPC
04/08/08   vrk     Lint Fixes.
11/15/07   asn     Added support for new feature MT-PDP terminating in TE
06/15/07   aw      Added support for PCSCF Address discovery using DHCP.
06/15/07   aw      Added support for IMS IM CN Flag.
05/23/07   rr      Changed DS_UMTS_MAX_QCPDP_STRING_LEN to 127 bytes.
05/01/07   aw      Added support for Signalling Indication Flag.
08/25/06   rr      Changed h-comp and d_comp to enums.
07/28/06   aw      Increased the version number of PDP Registry.
07/27/06   rr      Added DS_UMTS_PDP_V6_NOT_ALLOWED_FOR_DEFAULT_PROFILE to
                   ds_umts_pdp_profile_status_etype enum.
07/17/06   aw      Changed cscf to pcscf.
06/13/06   aw      Added support for IMS cscf addresses.
06/08/06   aw      Added support for rex critical sections.
                   wrapper functions around it.
12/06/05   rr      Fixed a typo where ds_umts_pdp_addr_type was defined as
                   union instead of struct.
12/01/05   rr      Added RMNET Profile Family.
05/12/05   rr      Added IPV6 code.
03/09/05   rc      Added status type DS_UMTS_PDP_READ_ONLY_FLAG_SET.
02/10/05   rc      Changed type (to UTF16 format) and length of profile name.
                   Added fields read_only_flag, otap-enabled_flag and
                   otap_napid to the profile structure.
                   Added get/set prototype functions for read_only_flag,
                   otap_enabled and otap_napid fields of the profile.
                   All changes were made under FEATURE_PROFILE_OTAP_REQUIREMENTS.
                   Moved version field to be the first field of the structure.
11/24/04   rc      Added define for default ATCOP profile.
11/22/04   rc      Added support for separation of ATCOP and sockets
                   profiles.
06/21/04   snb     Allow 16 PDP profiles under feature definition.
06/04/04   rc      Fixed Lint errors/warnings.
01/27/04   vsk     mainline m-pdp support
06/26/03   ar      Added support for secondary context and traffic flow
                   template paramaters.
02/14/03   vsk     Removed the dependency between context definition and
                   other parameter sets for a profile.
02/10/03   vsk     Added support to store/retrieve minimum UTMS QOS (AT+CGEQMIN)
                   parameters
01/16/03   vsk     creation of file
===========================================================================*/

/*===========================================================================

                     INCLUDE FILES FOR MODULE

===========================================================================*/
#include "comdef.h"
#include "ps_pkt_info.h"

/*===========================================================================

                      PUBLIC DATA DECLARATIONS

===========================================================================*/

/** @addtogroup dsumtspdpreg
@{ */

/*===========================================================================
  Constant definitions
===========================================================================*/

#define  DS_UMTS_PROFILE_VERSION       15  /**< Profile structure version. */
#define  DS_UMTS_MAX_TFT_PARAM_SETS    2   /**< Maximum number of TFT 
                                                parameter sets. */
#define  DS_UMTS_MAX_APN_STRING_LEN    100 /**< Maximum length of the APN 
                                                string. */
#define  DS_UMTS_MAX_QCPDP_STRING_LEN  127 /**< Maximum length of the 
                                                username/password. */
#define  DS_UMTS_MAX_PROFILE_NAME_LEN  15  /**< Maximum length of the profile 
                                                name. */
#define  DS_UMTS_MAX_OTAP_NAPID_LEN    48  /**< Maximum length of the OTAP 
                                                NAPID. */
#define  DS_3GPP_DEF_TETHERED_PROFILE  1   /**< Default tethered call 
                                                profile. */
#define  DS_3GPP_DEF_EMBEDDED_PROFILE  1   /**< Default embedded call 
                                                profile. */
#define  DS_UMTS_DEF_SOCKET_PROFILE    DS_3GPP_DEF_EMBEDDED_PROFILE
                                           /**< Default socket call profile. */

#define  DS_UMTS_DEF_ATCOP_PROFILE     DS_3GPP_DEF_TETHERED_PROFILE
                                           /**< Default ATCOP call profile. */
#define  DS_UMTS_DEF_RMNET_PROFILE     DS_3GPP_DEF_TETHERED_PROFILE
                                           /**< Default remote wireless wide 
                                                area network (RmNet) call 
                                                profile. */

/** Maximum number of client profiles. 
  There is a data structure dependency between DS_UMTS_MAX_PDP_PROFILE_NUM
  and AT command +CGACT. 
*/
  #define  DS_UMTS_MAX_PDP_PROFILE_NUM   16  

/** @} */ /* end_addtogroup dsumtspdpreg */
/** @addtogroup dsumtspdpreg
@{ */

/** Return type for all public functions exported by the PDP registry.
*/
typedef enum   
{
  DS_UMTS_PDP_SUCCESS=0x0,                /**< Successful operation. */
  DS_UMTS_PDP_FAIL,                       /**< General failure. */
  DS_UMTS_PDP_NOT_INITIALIZED,            /**< Registry is not initialized. */
  DS_UMTS_PDP_INVALID_PROFILE_NUM,        /**< Profile number passed is 
                                               invalid. */
  DS_UMTS_PDP_INVALID_PROFILE_FAMILY,     /**< Profile family is invalid. */
  DS_UMTS_PDP_ACCESS_ERROR,               /**< Access error. */
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED,        /**< Context is not defined for 
                                               profile. */
  DS_UMTS_PDP_INSUFFICIENT_OUTPUT_BUFFER, /**< Output parameter buffer is 
                                               too short. */
  DS_UMTS_PDP_INPUT_BUFFER_LEN_INVALID,   /**< Input buffer length parameter is 
                                               invalid. */
  DS_UMTS_PDP_PARMS_VALID_FLAG_NOT_SET,   /**< Valid flag for parameter set is 
                                               false. */
  DS_UMTS_PDP_INVALID_FILTER_ID,          /**< Filter ID passed is invalid. */
  DS_UMTS_PDP_READ_ONLY_FLAG_SET,         /**< Profile is read-only. */
  DS_UMTS_PDP_V6_NOT_ALLOWED_FOR_DEFAULT_PROFILE, /**< V6 profile should not be 
                                                       IPv6. */
  DS_UMTS_PDP_SIG_IND_ALLOWED_ONLY_WITH_TCLASS_INTR, /**< Signaling indication
                                               flag is supported only with 
                                               TCLASS_INTR. */
  DS_UMTS_PDP_SIG_IND_ALLOWED_ONLY_WITH_THANDLE_PRI1, /**< Signaling indication
                                               flag is supported only with 
                                               THANDLE_PRI1. */
  DS_UMTS_PDP_FORMAT_NOT_SUPPORTED,  /**< Requested format is not supported. */
  DS_UMTS_PDP_API_NOT_SUPPORTED,     /**< Requested API is not supported. */
  DS_UMTS_PDP_INVALID_SUBS_ID,       /**< Subscription ID is invalid. */
  DS_UMTS_PDP_SRC_STAT_DESC_ALLOWED_ONLY_WITH_TCLASS_CONV_OR_STRM
                                     /**< Source Statistics Descriptor is 
                                          supported only with TCLASS_CONV
                                          or TCLASS_STREAM. */
}ds_umts_pdp_profile_status_etype;

/** Enumeration type for Profile Family type. 
  Currently, three profile families are supported: \n 
  - ATCOP profiles for all externals calls.
  - Sockets profiles for all embedded calls.
  - RmNet profiles for all RmNet calls.

  @note1 If more profile families are added, the macro 
  DS_UMTS_PDP_MAX_PROFILE_FAMILIES must be updated also.
*/
typedef enum
{
  DS_UMTS_PDP_SOCKETS_PROFILE_FAMILY = 0x0000, /**<Profiles for embedded 
                                                   calls. */
  DS_UMTS_PDP_ATCOP_PROFILE_FAMILY   = 0x0000, /**<Profiles for Point-to-Point 
                                                   Protocol (PPP) calls. */
  DS_UMTS_PDP_RMNET_PROFILE_FAMILY   = 0x0000, /**<Profiles for RmNet calls. */
  DS_UMTS_PDP_CONSL_PROFILE_FAMILY   = 0x0000  /**<Profiles for all calls after
                                                   consolidation. */
#define DS_UMTS_PDP_MAX_PROFILE_FAMILIES 1
}ds_umts_pdp_profile_family_type;

/** Enumeration type for PDP type.\ The maximum value of 0xff is for 
  INTERNAL USE ONLY.
*/
typedef enum
{
  DS_UMTS_PDP_IP=0x0,                    /**< PDP type IP. */
  DS_UMTS_PDP_IPV4=0x0,                  /**< PDP type IPv4. */
  DS_UMTS_PDP_PPP,                       /**< PDP type PPP. */
  DS_UMTS_PDP_IPV6,                      /**< PDP type IPv6. */
  DS_UMTS_PDP_IPV4V6,                    /**< PDP type IPv4v6. */
  DS_UMTS_PDP_MAX=0xff                   /**< Force maximum to 0xff so that the
                                              enumeration is defined as 
                                              a byte. */
} ds_umts_pdp_type_enum_type;

/** Enumeration type for IP Version type. 
*/
typedef enum
{
  DS_IP_V4 = 4,       /**< IPv4 version. */
  DS_IP_V6 = 6,       /**< IPv6 version. */
  DS_IP_V4V6 = 10     /**< IPv4v6 version. */
} ds_ip_version_enum_type;

/** Enumeration type for Authentication type for a PDP context.\ The
  maximum value of 0xff is for INTERNAL USE ONLY.

  @note1 The numerical values of these enumerations must match those 
  defined in ps_iface_auth_alg_pref_bitmask_e_type.
*/
typedef enum
{
  DS_UMTS_PDP_AUTH_NONE = 0x0,           /**< No authentication. */
  DS_UMTS_PDP_AUTH_PAP  = 0x1,           /**< PAP authentication. */
  DS_UMTS_PDP_AUTH_CHAP = 0x2,           /**< CHAP authentication. */
  DS_UMTS_PDP_AUTH_CHAP_OR_PAP = 0x3,    /**< CHAP or PAP authentication. */
  DS_UMTS_PDP_AUTH_MAX  = 0xff           /**< Force maximum to 0xff so that the
                                              enumeration is defined as 
                                              a byte. */
} ds_umts_pdp_auth_enum_type;

/** Enumeration type for QoS Traffic Class type.\ The
  maximum value of 0xff is for INTERNAL USE ONLY.
*/
typedef enum
{
  DS_UMTS_QOS_TCLASS_SUBSCRIBE = 0x0,    /**< Subscribed. */
  DS_UMTS_QOS_TCLASS_CONV      = 0x1,    /**< Conversational. */
  DS_UMTS_QOS_TCLASS_STRM      = 0x2,    /**< Streaming. */
  DS_UMTS_QOS_TCLASS_INTR      = 0x3,    /**< Interactive. */
  DS_UMTS_QOS_TCLASS_BACK      = 0x4,    /**< Background. */
  DS_UMTS_QOS_TCLASS_RESERVED  = 0xff    /**< Force maximum to 0xff so that the
                                              enumeration is defined as 
                                              a byte. */
} ds_umts_qos_tclass_enum_type;

/** Enumeration type for QoS Delivery Order type.\ The
  maximum value of 0xff is for INTERNAL USE ONLY.
*/
typedef enum
{
  DS_UMTS_QOS_DORDER_SUBSCRIBE = 0x0,    /**< Subscribed. */
  DS_UMTS_QOS_DORDER_YES       = 0x1,    /**< With delivery order. */
  DS_UMTS_QOS_DORDER_NO        = 0x2,    /**< Without delivery order. */
  DS_UMTS_QOS_DORDER_RESERVED  = 0xff    /**< Force maximum to 0xff so that the
                                              enumeration is defined as 
                                              a byte. */
} ds_umts_qos_dorder_enum_type;

/** Enumeration type for QoS SDU Error Codes (per 3GPP TS 24.008 10.5.6.5).
*/
typedef enum
{
  DS_UMTS_QOS_SDU_ERR_SUBSCRIBE  = 0x0,  /**< Subscribed. */
  DS_UMTS_QOS_SDU_ERR_1E2        = 0x1,  /**< 1E-2. */
  DS_UMTS_QOS_SDU_ERR_7E3        = 0x2,  /**< 7E-3. */
  DS_UMTS_QOS_SDU_ERR_1E3        = 0x3,  /**< 1E-3. */
  DS_UMTS_QOS_SDU_ERR_1E4        = 0x4,  /**< 1E-4. */
  DS_UMTS_QOS_SDU_ERR_1E5        = 0x5,  /**< 1E-5. */
  DS_UMTS_QOS_SDU_ERR_1E6        = 0x6,  /**< 1E-4. */
  DS_UMTS_QOS_SDU_ERR_1E1        = 0x7,  /**< 1E-1. */
  DS_UMTS_QOS_SDU_ERR_MAX        = 0x8,  /**< Maximum value. */
  DS_UMTS_QOS_SDU_ERR_RESERVED   = 0xff  /**< Force maximum to 0xff so that the
                                              enumeration is defined as 
                                              a byte. */
} ds_umts_qos_sdu_error_enum_type;

/** Enumeration type for QoS RES BER Codes (per 3GPP TS 24.008 10.5.6.5).\ The
  maximum value of 0xff is for INTERNAL USE ONLY.
*/
typedef enum
{
  DS_UMTS_QOS_RES_BER_SUBSCRIBE  = 0x0,  /**< Subscribed. */
  DS_UMTS_QOS_RES_BER_5E2        = 0x1,  /**< 5E-2. */
  DS_UMTS_QOS_RES_BER_1E2        = 0x2,  /**< 1E-2. */
  DS_UMTS_QOS_RES_BER_5E3        = 0x3,  /**< 5E-3. */
  DS_UMTS_QOS_RES_BER_4E3        = 0x4,  /**< 4E-3. */
  DS_UMTS_QOS_RES_BER_1E3        = 0x5,  /**< 1E-3. */
  DS_UMTS_QOS_RES_BER_1E4        = 0x6,  /**< 1E-4. */
  DS_UMTS_QOS_RES_BER_1E5        = 0x7,  /**< 1E-5. */
  DS_UMTS_QOS_RES_BER_1E6        = 0x8,  /**< 1E-6. */
  DS_UMTS_QOS_RES_BER_6E8        = 0x9,  /**< 6E-8. */
  DS_UMTS_QOS_RES_BER_RESERVED   = 0xff  /**< Force maximum to 0xff so that the
                                              enumeration is defined as 
                                              a byte. */
} ds_umts_qos_res_ber_enum_type;

/** Enumeration type for QoS Erroneous SDU Delivery Options 
  (per 3GPP TS 24.008 10.5.6.5).\ The maximum value of 0xff is for INTERNAL
  USE ONLY.
*/
typedef enum
{
  DS_UMTS_QOS_SDU_DLVR_SUBSCRIBE = 0x0, /**< Subscribed. */
  DS_UMTS_QOS_SDU_DLVR_NODETECT  = 0x1, /**< No detection. */
  DS_UMTS_QOS_SDU_DLVR_YES       = 0x2, /**< Erroneous SDU is delivered. */
  DS_UMTS_QOS_SDU_DLVR_NO        = 0x3, /**< Erroneous SDU is not delivered. */
  DS_UMTS_QOS_SDU_DLVR_RESERVED  = 0xff /**< Force maximum to 0xff so that the
                                             enumeration is defined as 
                                             a byte. */
} ds_umts_qos_sdu_dlvr_enum_type;

/** Enumeration type that identifies the GPRS QoS parameter set.\ This is used 
internally by the registry API library functions. 
*/
typedef enum
{
  DS_UMTS_GPRS_QOS_REQ_TYPE,                 /**< GPRS requested QoS. */
  DS_UMTS_GPRS_QOS_MIN_TYPE                  /**< GPRS minimum QoS. */
}ds_umts_gprs_qos_set_enum_type;

/** Enumeration type that identifies the UMTS QoS parameter set.\ This is used 
internally by the registry API library functions. 
*/
typedef enum
{
  DS_UMTS_QOS_REQ_TYPE,                      /**< UMTS requested QoS. */
  DS_UMTS_QOS_MIN_TYPE                       /**< UMTS minimum QoS. */
}ds_umts_qos_set_enum_type;

/** Enumeration type used to discriminate IPv6 addresses.\ This enumeration
is included only if FEATURE_DATA_PS_IPV6 is TRUE.
*/
typedef enum
{
  DS_UMTS_PDP_IPV6_8 = 0x00, /**< 8-bit address. */
  DS_UMTS_PDP_IPV6_16,       /**< 16-bit address. */
  DS_UMTS_PDP_IPV6_32,       /**< 32-bit address. */
  DS_UMTS_PDP_IPV6_64        /**< 64-bit address. */
} ds_umts_pdp_ipv6_etype;

/** Enumeration type used to map CM's sys_modem_as_id_e_type. \
    Subscription none and max are for internal use only. 
*/
typedef enum 
{
  DS_UMTS_PDP_ACTIVE_SUBSCRIPTION_NONE = 0x00,  /**< No subscription */
  DS_UMTS_PDP_ACTIVE_SUBSCRIPTION_1,            /**< First subscription */
  DS_UMTS_PDP_ACTIVE_SUBSCRIPTION_2,            /**< Second subscription */
  DS_UMTS_PDP_ACTIVE_SUBSCRIPTION_MAX  = 0xff   /**< Maximum value */
} ds_umts_pdp_subs_e_type;

/** Enumeration for Profile Family type. 
    Currently only 2 profile family types are supported.
*/
typedef enum
{
  DS_UMTS_EMBEDDED_PROFILE_FAMILY  = 0x0000, /**< Embedded family type */
  DS_UMTS_TETHERED_PROFILE_FAMILY  = 0x0001  /**< Tethered family type */
} ds_umts_profile_family_e_type;

/** @brief Structure for IPv6 addresses.

This structure is included only if FEATURE_DATA_PS_IPV6 is TRUE. The
structure uses the in6_u union.
*/
typedef PACKED struct PACKED_POST
{
  ds_umts_pdp_ipv6_etype type; /**< Type of IPv6 address. */
  PACKED union PACKED_POST
  {
    uint8   u6_addr8[16]; /**< IPv6 8-bit PDP address size. */
    /*~ CASE DS_UMTS_PDP_IPV6_8 ds_umts_pdp_addr_type_ipv6.in6_u.u6_addr8 */
    uint16  u6_addr16[8]; /**< IPv6 16-bit PDP address size. */
    /*~ CASE DS_UMTS_PDP_IPV6_16 ds_umts_pdp_addr_type_ipv6.in6_u.u6_addr16 */
    uint32  u6_addr32[4]; /**< IPv6 32-bit PDP address size. */
    /*~ CASE DS_UMTS_PDP_IPV6_32 ds_umts_pdp_addr_type_ipv6.in6_u.u6_addr32 */
    uint64  u6_addr64[2]; /**< IPv6 64-bit PDP address size. */
    /*~ CASE DS_UMTS_PDP_IPV6_64 ds_umts_pdp_addr_type_ipv6.in6_u.u6_addr64 */
    /*~ DEFAULT ds_umts_pdp_addr_type_ipv6.in6_u.u6_addr8 */
  } in6_u; /**< in6_u union. */ 
  /*~ FIELD ds_umts_pdp_addr_type_ipv6.in6_u 
      DISC ds_umts_pdp_addr_type_ipv6.type */
}ds_umts_pdp_addr_type_ipv6;
 
/** @brief Generic type to hold both IPv4 and IPv6 addresses. 
*/
typedef PACKED struct PACKED_POST
{
 ds_ip_version_enum_type ip_vsn; /**< IP version. */
 PACKED struct PACKED_POST
 {
  uint32 pdp_addr_ipv4;                      /**< IPv4 PDP address type. */ 
  ds_umts_pdp_addr_type_ipv6 pdp_addr_ipv6;  /**< IPv6 PDP address type. */
 } pdp_addr; /**< PDP address. */
}ds_umts_pdp_addr_type;

/*------------------------------------------------------------------------------
   PDP Header and Data compression enums
------------------------------------------------------------------------------*/

/* g++ does not respect packing of enums in cpp files, but allows packing in 
 * c files. This causes struct mismatches. As a workaround, disable packing
 * for gcc compiler.
 */

/** PDP header compression types.
 */
typedef PACKED enum 
{
  DS_UMTS_PDP_HEADER_COMP_OFF = 0, /**< PDP header compression is off. */
  DS_UMTS_PDP_HEADER_COMP_ON  = 1, /**< Manufacturer preferred compression. */
  DS_UMTS_PDP_HEADER_COMP_RFC1144, /**< PDP header compression based on 
                                        RFC 1144.*/
  DS_UMTS_PDP_HEADER_COMP_RFC2507, /**< PDP header compression based on 
                                        RFC 2507.*/
  DS_UMTS_PDP_HEADER_COMP_RFC3095, /**< PDP header compression based on 
                                        RFC 3095.*/   
  DS_UMTS_PDP_HEADER_COMP_MAX =0xFF /**< Force maximum to 0xff so that the
                                         enumeration is defined as a byte. */

} PACKED_POST ds_umts_pdp_header_comp_e_type;


/** PDP data compression types defined in 3GPP TS 44.065 (sect 6.6.1.1.4).
 */
typedef PACKED enum 
{

  DS_UMTS_PDP_DATA_COMP_OFF = 0,   /**< PDP data compression is off. */
  DS_UMTS_PDP_DATA_COMP_ON  = 1,   /**< Manufacturer preferred compression. */
  DS_UMTS_PDP_DATA_COMP_V42_BIS,   /**< V.42BIS data compression. */
  DS_UMTS_PDP_DATA_COMP_V44,       /**< V.44 data compression. */  
  DS_UMTS_PDP_DATA_COMP_MAX = 0xFF /**< Force maximum to 0xff so that the
                                        enumeration is defined as a byte. */

} PACKED_POST ds_umts__pdp_data_comp_e_type;


/** IPv4 address allocation mechanism.
*/
typedef enum 
{
  DS_UMTS_PDP_IPV4_ADDR_ALLOC_NAS = 0,    /**< Address allocation using NAS. */
  DS_UMTS_PDP_IPV4_ADDR_ALLOC_DHCPV4 = 1, /**< Address allocation using 
                                               DHCPv4. */
  DS_UMTS_PDP_IPV4_ADDR_ALLOC_MAX         /**< Internal use only. */
} ds_umts_pdp_ipv4_addr_alloc_e_type;

/** PDP access list control.
*/
typedef enum pdp_access_control
{
  DSAT_PDP_ACCESS_CONTROL_NONE       = 0x0, /**< No access. */
  DSAT_PDP_ACCESS_CONTROL_REJECT     = 0x1, /**< Reject access. */
  DSAT_PDP_ACCESS_CONTROL_PERMISSION = 0x2  /**< Allow access. */
} dsat_pdp_access_control_e_type;

/** Used for PDP access list control. */
typedef dsat_pdp_access_control_e_type ds_umts_pdp_access_ctrl_e_type;

/** @brief Stores the PDP context parameters. 

  @sa ds_umts_get_pdp_profile_context_info
*/
typedef PACKED struct PACKED_POST
{
  boolean   valid_flg;              /**< Whether the parameters are set and 
                                         valid. */
  byte      pdp_context_number;     /**< Same as the profile number. */
  ds_umts_pdp_type_enum_type  pdp_type;    /**< PDP type (IP/PPP). */
  ds_umts_pdp_header_comp_e_type   h_comp; /**< PDP header compression 
                                                support. */
  ds_umts__pdp_data_comp_e_type    d_comp; /**< Data compression support
                                                -- v.42. */
  ds_umts_pdp_addr_type    pdp_addr;       /**< PDP address. */ 
  byte      apn[DS_UMTS_MAX_APN_STRING_LEN+1]; /**< APN string. */
  boolean   secondary_flag;                    /**< Secondary profile. */
  byte      primary_id;                        /**< Link to primary profile. */
  ds_umts_pdp_access_ctrl_e_type     access_ctrl_flag; /**< Access control
                                                            flag. */
  ds_umts_pdp_ipv4_addr_alloc_e_type ipv4_addr_alloc;  /**< Address allocation
                                                            mechanism. */
} ds_umts_pdp_context_type;

/** @brief Stores the PDP authentication parameters.
*/
typedef PACKED struct PACKED_POST
{
  ds_umts_pdp_auth_enum_type  auth_type;           /**< Authentication type. */
  byte      password[DS_UMTS_MAX_QCPDP_STRING_LEN+1]; /**< Password/secret 
                                                           string. */
  byte      username[DS_UMTS_MAX_QCPDP_STRING_LEN+1]; /**< Username string. */
} ds_umts_pdp_auth_type;

/** @brief Stores the UMTS Quality of Service (QoS) parameters.
*/
typedef PACKED struct PACKED_POST
{
  boolean   valid_flg;                        /**< Whether the parameters are 
                                                   set and valid. */
  ds_umts_qos_tclass_enum_type traffic_class; /**< Traffic class. */
  uint32    max_ul_bitrate;                 /**< Maximum UL bitrate. */
  uint32    max_dl_bitrate;                 /**< Maximum DL bitrate. */
  uint32    gtd_ul_bitrate;                 /**< Guaranteed UL bitrate. */
  uint32    gtd_dl_bitrate;                 /**< Guaranteed DL bitrate. */
  ds_umts_qos_dorder_enum_type dlvry_order; /**< SDU delivery order. */
  uint32    max_sdu_size;                   /**< Maximum SDU size. */
  ds_umts_qos_sdu_error_enum_type  sdu_err; /**< SDU error ratio list index. */
  ds_umts_qos_res_ber_enum_type    res_biterr;   /**< Residual bit error list 
                                                      index. */
  ds_umts_qos_sdu_dlvr_enum_type   dlvr_err_sdu; /**< Delivery of erroneous 
                                                      SDU. */
  uint32    trans_delay;                    /**< Transfer delay. */
  uint32    thandle_prio;                   /**< Traffic handling priority. */
  boolean   sig_ind;                        /**< Signaling indication flag. */
  uint32    src_stat_desc;                  /**< Source Statistics Descriptor. */
} ds_umts_umts_qos_params_type;

/** @brief Stores the GPRS QoS parameters.
*/
typedef PACKED struct  PACKED_POST
{
  boolean   valid_flg;      /**< Whether the parameters are set and valid. */
  uint32    precedence;     /**< Precedence class. */
  uint32    delay;          /**< Delay class. */
  uint32    reliability;    /**< Reliability class. */
  uint32    peak;           /**< Peak throughput class. */
  uint32    mean;           /**< Mean throughput class. */
} ds_umts_gprs_qos_params_type;

/** LTE QoS Class Identifier (QCI) as defined in 3GPP TS 23.401 Rel8.
*/
typedef PACKED enum
{
  DS_3GPP_LTE_QCI_0 = 0,   /**< LTE QoS QCI is 0. */
  DS_3GPP_LTE_QCI_1 = 1,   /**< LTE QoS QCI is 1. */ 
  DS_3GPP_LTE_QCI_2 = 2,   /**< LTE QoS QCI is 2. */
  DS_3GPP_LTE_QCI_3 = 3,   /**< LTE QoS QCI is 3. */ 
  DS_3GPP_LTE_QCI_4 = 4,   /**< LTE QoS QCI is 4. */
  DS_3GPP_LTE_QCI_5 = 5,   /**< LTE QoS QCI is 5. */ 
  DS_3GPP_LTE_QCI_6 = 6,   /**< LTE QoS QCI is 6. */
  DS_3GPP_LTE_QCI_7 = 7,   /**< LTE QoS QCI is 7. */ 
  DS_3GPP_LTE_QCI_8 = 8,   /**< LTE QoS QCI is 8. */
  DS_3GPP_LTE_QCI_9 = 9,   /**< LTE QoS QCI is 9. */
  DS_3GPP_LTE_QCI_INVALID  /**< LTE QoS QCI is invalid. */
} ds_3gpp_lte_qci_e_type;

/** @brief Stores the Long Term Evolution (LTE) QoS parameters.
*/
typedef PACKED struct  PACKED_POST
{
  boolean                valid_flg;       /**< Whether the parameters are set 
                                               and valid. */
  ds_3gpp_lte_qci_e_type qci;             /**< QCI value. */
  uint32                 g_dl_bit_rate;   /**< Guaranteed DL bitrate. */
  uint32                 max_dl_bit_rate; /**< Maximum DL bitrate. */
  uint32                 g_ul_bit_rate;   /**< Guaranteed UL bitrate. */
  uint32                 max_ul_bit_rate; /**< Maximum UL bitrate. */
} ds_3gpp_lte_qos_params_type;

/** @brief Stores the Domain Name Service (DNS) parameters for the PDP profile.
*/
typedef PACKED struct PACKED_POST
{  
   ds_ip_version_enum_type ip_vsn;             /**< IP version. */
   ds_umts_pdp_addr_type   primary_dns_addr;   /**< Primary DNS address. */
   ds_umts_pdp_addr_type   secondary_dns_addr; /**< Secondary DNS address. */
}ds_umts_pdp_dns_addresses_type;

/** @brief Stores types for the TFT IP address mask and prefix length.
*/
typedef PACKED union PACKED_POST
{
 uint32 mask;                      /**< Address mask for IPv4 address. */
 uint8  prefix_len;                /**< Prefix length for IPv6 address. */
   /*~ CASE DS_IP_V4 ds_umts_mask_type.mask */
   /*~ CASE DS_IP_V6 ds_umts_mask_type.prefix_len */
   /*~ DEFAULT ds_umts_mask_type.mask */
} ds_umts_mask_type;

/** @brief Stores types for the TFT source IP address and IP subnet mask.
*/
typedef PACKED struct PACKED_POST
{
  ds_ip_version_enum_type ip_vsn;   /**< IP version. */
  ds_umts_pdp_addr_type    address; /**< IPv4 or IPv6 address. */
  ds_umts_mask_type    mask;        /**< IPv4 or IPv6 subnet mask. */
   /*~ FIELD ds_umts_address_mask_type.mask DISC ds_umts_address_mask_type.ip_vsn */
} ds_umts_address_mask_type;

/** @brief Stores ranges for the TFT source and destination ports.
*/
typedef PACKED struct PACKED_POST
{
  uint16    from;                   /**< Port range lower limit. */
  uint16    to;                     /**< Port range upper limit. */
} ds_umts_port_range_type;

/** @brief Stores the TFT parameters.
*/
typedef PACKED struct PACKED_POST
{
  boolean                    valid_flg;    /**< Whether the parameters are set 
                                                and valid. */
  byte                       filter_id;    /**< Filter identifier. */
  byte                       eval_prec_id; /**< Evaluation precedence index. */
  ds_umts_address_mask_type  src_addr_mask; /**< Source address and mask. */
  byte                       prot_num;     /**< Protocol number is greater than
                                                or equal to next_header in 
                                                IPv6. */
  ds_umts_port_range_type    dest_port_range; /**< Destination port range. */
  ds_umts_port_range_type    src_port_range;  /**< Source port range. */
  uint32                     ipsec_spi;    /**< Security parameter index. */
  uint16                     tos_mask;     /**< Type of service and mask is 
                                                greater than or equal to 
                                                tclass_mask in IPv6. */
  uint32                     flow_label;   /**< Flow label. */
} ds_umts_tft_params_type;

/** @brief Stores the Iface Linger parameters.
*/
typedef PACKED struct PACKED_POST
{
  boolean valid_flag;         /**< Whether the parameters are set 
                                   and valid. */
  boolean allow_linger_flag;  /**< Flag to indicate whether lingering is */
                              /**< supported for this profile. */
  uint16   linger_timeout_val; /**< The lingering timeout value in seconds. */
} ds_umts_linger_params_type;

/** @brief PDP profile definition.

  @note1 This structure is PACKED and is stored in the EFS as the  
  profile. If there are any changes to the structure or substructures, 
  ensure that all structures are packed as well. 
  Also, the offsets of the substructures and the parameters 
  within are defined below. Check and ensure that they are the 
  right values and account for any additions/deletions. 
*/
typedef PACKED struct PACKED_POST
{
  byte                           version;          /**< Version identifier. */
  boolean                        read_only_flag;   /**< Whether the context is
                                                        read-only. */
  uint16  profile_name[DS_UMTS_MAX_PROFILE_NAME_LEN+1]; /**< Profile name in  
                                                        UTF16 or ASCII string 
                                                        format. */  
  ds_umts_pdp_context_type       context;          /**< Context definition. */
  ds_umts_pdp_auth_type          auth;             /**< Authentication 
                                                        information. */
  ds_umts_umts_qos_params_type   qos_request_umts; /**< UMTS QoS requested 
                                                        parameters. */
  ds_umts_umts_qos_params_type   qos_minimum_umts; /**< UMTS QoS minimum
                                                        parameters. */
  ds_umts_gprs_qos_params_type   qos_request_gprs; /**< GPRS QoS requested
                                                        parameters. */
  ds_umts_gprs_qos_params_type   qos_minimum_gprs; /**< GPRS QoS minimum 
                                                        parameters. */
  ds_3gpp_lte_qos_params_type    qos_request_lte;  /**< LTE QoS requested 
                                                        parameters. */
  ds_umts_pdp_dns_addresses_type dns_addr;         /**< DNS address; user 
                                                        specified. */
  ds_umts_tft_params_type        tft[DS_UMTS_MAX_TFT_PARAM_SETS];
                                         /**< Traffic flow template. */
  ds_umts_linger_params_type     iface_linger_params;
                                         /**< Iface Linger parameters */
  boolean                        otap_enabled_flag; /**< Whether the context is 
                                                         OTA provisionable. */
  byte                           otap_napid[DS_UMTS_MAX_OTAP_NAPID_LEN+1];
                                         /**< Network access point identifier 
                                              in UTF8 format with variable    
                                              length encoding. */
  boolean                        request_pcscf_address_flag; 
                                         /**< Flag to indicate if the PCSCF 
                                              address should be requested
                                              in PCO for this profile. */
  boolean                        request_pcscf_address_using_dhcp_flag;
                                         /**< Flag to indicate if the PCSCF 
                                              address should be requested 
                                              using DHCP for this profile. */
  boolean                        im_cn_flag; 
                                         /**< Flag to indicate if 
                                              im_cn_flag should be requested 
                                              for this profile. */
  boolean                        apn_disable_flag; 
                                         /**< Used to determine if 
                                              an APN is disabled. */
  uint32                         inactivity_timer_val; 
                                         /**< Value of the inactivity timer 
                                              in seconds. */
  uint8                          apn_class; 
                                         /**< Used to determine APN class */
  boolean                        transience_flag;
                                         /**< Flag used to determine if the
                                              profile changes are updated 
                                              in EFS */
}ds_umts_pdp_profile_type;


/** @} */ /* end_addtogroup dsumtspdpreg */
/** @addtogroup dsumtspdpreg
@{ */

/** Location of the profile version. This is tied to the definition of 
  ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed. 
  */
#define DS_UMTS_PDP_PROFILE_VERSION_OFFSET     0x0 

/** Location of the read-only flag. This is tied to the
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed.
*/
#define DS_UMTS_PDP_PROFILE_READ_ONLY_FLAG_OFFSET   ( DS_UMTS_PDP_PROFILE_VERSION_OFFSET +\
          (sizeof(byte))) 

/** Location of the profile name. This is tied to the
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed.
*/
#define DS_UMTS_PDP_PROFILE_NAME_OFFSET  ( DS_UMTS_PDP_PROFILE_READ_ONLY_FLAG_OFFSET + \
          sizeof(boolean) )

/** Location of the context definition parameters. This is tied to
  the definition of ds_umts_pdp_profile_type and must be updated 
  if ds_pdp_umts_pdp_profile_type is changed. 
*/
#define DS_UMTS_PDP_PROFILE_CONTEXT_OFFSET  ( DS_UMTS_PDP_PROFILE_NAME_OFFSET + \
          (sizeof(uint16)*(DS_UMTS_MAX_PROFILE_NAME_LEN+1)) )

/** Location of the authentication definition parameters. This is tied to the
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed.
*/
#define DS_UMTS_PDP_PROFILE_AUTH_OFFSET     ( DS_UMTS_PDP_PROFILE_CONTEXT_OFFSET + \
          sizeof(ds_umts_pdp_context_type) )

/** Location of the UMTS QoS parameters (requested). This is tied to the 
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed.
*/
#define DS_UMTS_PDP_PROFILE_UMTS_REQ_QOS_OFFSET ( DS_UMTS_PDP_PROFILE_AUTH_OFFSET + \
          sizeof(ds_umts_pdp_auth_type ) )

/** Location of the UMTS QoS parameters (minimum). This is tied to the 
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed.
*/
 #define DS_UMTS_PDP_PROFILE_UMTS_MIN_QOS_OFFSET ( DS_UMTS_PDP_PROFILE_UMTS_REQ_QOS_OFFSET + \
          sizeof(ds_umts_umts_qos_params_type ) )

/** Location of the GPRS QoS parameters (requested). This is tied to the 
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed.
*/
#define DS_UMTS_PDP_PROFILE_GPRS_REQ_QOS_OFFSET ( DS_UMTS_PDP_PROFILE_UMTS_MIN_QOS_OFFSET +\
          sizeof(ds_umts_umts_qos_params_type) )

/** Location of the GPRS QoS parameters (minimum). This is tied to the 
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed.
*/
#define DS_UMTS_PDP_PROFILE_GPRS_MIN_QOS_OFFSET ( DS_UMTS_PDP_PROFILE_GPRS_REQ_QOS_OFFSET +\
          sizeof(ds_umts_gprs_qos_params_type) )

/** Location of the LTE QoS parameters. This is tied to the
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed. */ 
#define DS_3GPP_PDP_PROFILE_LTE_QOS_OFFSET ( DS_UMTS_PDP_PROFILE_GPRS_MIN_QOS_OFFSET +\
          sizeof(ds_umts_gprs_qos_params_type) )

/** Location of the DNS addresses parameters. This is tied to the
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed.
*/
#define DS_UMTS_PDP_PROFILE_DNS_ADDR_OFFSET    ( DS_3GPP_PDP_PROFILE_LTE_QOS_OFFSET +\
          sizeof(ds_3gpp_lte_qos_params_type) )

/** Location of the TFT parameters. This is tied to the
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed.
 */
#define DS_UMTS_PDP_PROFILE_TFT_OFFSET         ( DS_UMTS_PDP_PROFILE_DNS_ADDR_OFFSET +\
          (sizeof(ds_umts_pdp_dns_addresses_type)) )

/** Location of the Iface Linger parameters. This is tied to the
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed.
*/
#define DS_UMTS_PDP_PROFILE_LINGER_PARAMS_OFFSET \
                                    ( DS_UMTS_PDP_PROFILE_TFT_OFFSET +\
          (DS_UMTS_MAX_TFT_PARAM_SETS*sizeof(ds_umts_tft_params_type)) )

/** Location of the OTAP-enabled flag. This is tied to the 
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed.
*/
#define DS_UMTS_PDP_PROFILE_OTAP_ENABLED_FLAG_OFFSET ( DS_UMTS_PDP_PROFILE_LINGER_PARAMS_OFFSET +\
                        (sizeof(ds_umts_linger_params_type)) )

/** Location of the OTAP network access point identifier. This is 
  tied to the definition of ds_umts_pdp_profile_type and must be
  updated if ds_pdp_umts_pdp_profile_type is changed. 
 */
#define DS_UMTS_PDP_PROFILE_OTAP_NAPID_OFFSET ( DS_UMTS_PDP_PROFILE_OTAP_ENABLED_FLAG_OFFSET +\
          (sizeof(boolean)) )

/** Location of the PCSCF address flag. This is tied to the 
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed. */
#define DS_UMTS_PDP_PROFILE_REQUEST_PCSCF_ADDRESS_FLAG_OFFSET ( \
          DS_UMTS_PDP_PROFILE_OTAP_NAPID_OFFSET +\
          ( (DS_UMTS_MAX_OTAP_NAPID_LEN+1) * sizeof(byte))) 

/** Location of the PCSCF address using the DHCP flag. This is tied to the 
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed. */
#define DS_UMTS_PDP_PROFILE_REQUEST_PCSCF_ADDRESS_USING_DHCP_FLAG_OFFSET ( \
          DS_UMTS_PDP_PROFILE_REQUEST_PCSCF_ADDRESS_FLAG_OFFSET +\
          ( sizeof(boolean)))

/** Location of the IM_CN flag. This is tied to the 
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed. */
#define DS_UMTS_PDP_PROFILE_IM_CN_FLAG_OFFSET ( \
          DS_UMTS_PDP_PROFILE_REQUEST_PCSCF_ADDRESS_USING_DHCP_FLAG_OFFSET +\
          (sizeof(boolean)) ) 

/** Location of the APN disable flag. This is tied to the 
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed. */
#define DS_UMTS_PDP_APN_DISABLE_FLAG_OFFSET  \
        ( \
            DS_UMTS_PDP_PROFILE_IM_CN_FLAG_OFFSET + \
            sizeof(boolean) \
        ) 
/** Location of the APN inactivity timer value. This is tied to the 
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed. */
#define DS_UMTS_PDP_INACTIVITY_TIMER_VAL_OFFSET  \
        ( \
            DS_UMTS_PDP_APN_DISABLE_FLAG_OFFSET + \
            sizeof(boolean) \
        )

/** Location of the APN class value. This is tied to the
  definition of ds_umts_pdp_profile_type and must be updated if 
  ds_pdp_umts_pdp_profile_type is changed. */
#define DS_UMTS_PDP_APN_CLASS_OFFSET  \
        ( \
            DS_UMTS_PDP_INACTIVITY_TIMER_VAL_OFFSET + \
            sizeof(uint32) \
        )
#define DS_UMTS_PDP_TRANSIENCE_FLAG_OFFSET  \
        ( \
           DS_UMTS_PDP_APN_CLASS_OFFSET  + \
            sizeof(uint8) \
        )

/** Valid flag's offset. This is tied to the definition of
  ds_pdp_profile_type and must be updated if
  ds_pdp_profile_type or any substructures are changed.

  @note1 Boolean occupies 1 byte, and enumerations are 2 bytes.	 
*/
#define DS_UMTS_PDP_CONTEXT_VALID_FLG_OFFSET ( DS_UMTS_PDP_PROFILE_CONTEXT_OFFSET )

/** PDP address offset. This is tied to the definition of
  ds_pdp_profile_type and must be updated if
  ds_pdp_profile_type or any substructures are changed.

  @note1 Boolean occupies 1 byte, and enumerations are 2 bytes. 
*/
#define DS_UMTS_PDP_CONTEXT_ADDR_OFFSET     (DS_UMTS_PDP_PROFILE_CONTEXT_OFFSET +\
          sizeof(byte) + \
          sizeof(byte) + \
          sizeof(ds_umts_pdp_type_enum_type) + \
          sizeof(boolean) + \
          sizeof(boolean) )

/** APN offset. This is tied to the definition of
  ds_pdp_profile_type and must be updated if
  ds_pdp_profile_type or any substructures are changed.

  @note1 Boolean occupies 1 byte, and enumerations are 2 bytes. 
*/
#define DS_UMTS_PDP_CONTEXT_APN_OFFSET      (DS_UMTS_PDP_CONTEXT_ADDR_OFFSET + \
          sizeof(ds_umts_pdp_addr_type))

/** PDP IPv4 address allocation offset. This is tied to the definition of 
  ds_pdp_profile_type and must be updated if ds_pdp_profile_type or any 
  substructures are changed.

  @note1 Boolean occupies 1 byte, and enumerations are 2 bytes. 
*/
#define DS_UMTS_PDP_CONTEXT_IPV4_ADDR_ALLOC_OFFSET  \
        ( \
            DS_UMTS_PDP_CONTEXT_ADDR_OFFSET + \
            sizeof(byte) * (DS_UMTS_MAX_APN_STRING_LEN+1) + \
            sizeof(boolean) + \
            sizeof(byte) + \
            sizeof(dsat_pdp_access_control_e_type) \
        )

/** Authentication type offset. This is tied to the definition of 
  ds_pdp_profile_type and must be updated if ds_pdp_profile_type or any 
  substructures are changed.

  @note1 Boolean occupies 1 byte, and enumerations are 2 bytes. 
*/
#define DS_UMTS_PDP_AUTH_TYPE_OFFSET       (DS_UMTS_PDP_PROFILE_AUTH_OFFSET)

/** Password field offset. This is tied to the definition of 
  ds_pdp_profile_type and must be updated if ds_pdp_profile_type
  or any substructures are changed.

  @note1 Boolean occupies 1 byte, and enumerations are 2 bytes. 
*/
#define DS_UMTS_PDP_AUTH_PASSWORD_OFFSET   (DS_UMTS_PDP_AUTH_TYPE_OFFSET + \
            sizeof( ds_umts_pdp_auth_enum_type) )

/** Username field offset. This is tied to the definition of 
  ds_pdp_profile_type and must be updated if ds_pdp_profile_type or any 
  substructures are changed.

  @note1 Boolean occupies 1 byte, and enumerations are 2 bytes. 
*/
#define DS_UMTS_PDP_AUTH_USERNAME_OFFSET   (DS_UMTS_PDP_AUTH_PASSWORD_OFFSET +\
            DS_UMTS_MAX_QCPDP_STRING_LEN + 1 )

/** Offset location in the profile file for the primary DNS address 
  parameters. This is tied to the definition of ds_pdp_profile_type and 
  must be updated if ds_pdp_profile_type or any substructures are changed.

  @note1 Boolean occupies 1 byte, and enumerations are 2 bytes. 
*/
#define DS_UMTS_PDP_DNS_PRIMARY_OFFSET ( DS_UMTS_PDP_PROFILE_DNS_ADDR_OFFSET + \
             sizeof(byte) )

/** Offset location in the profile file for the secondary DNS address 
  parameters. This is tied to the definition of ds_pdp_profile_type and must be 
  updated if ds_pdp_profile_type or any substructures are changed.
*/
#define DS_UMTS_PDP_DNS_SECONDARY_OFFSET   ( DS_UMTS_PDP_DNS_PRIMARY_OFFSET + \
             sizeof(ds_umts_pdp_addr_type) )

/** Offset location in the profile file for the TFT parameters.
  This is tied to the definition of ds_pdp_profile_type and must be updated 
  if ds_pdp_profile_type or any substructures are changed. 
  
  DS_UMTS_PDP_PROFILE_TFT_FILTER_OFFSET is the TFT parameter set, indexed by
  (filter identifier-1).
   
  @note1 Boolean occupies 1 byte, and enumerations are 2 bytes.
*/
#define DS_UMTS_PDP_PROFILE_TFT_FILTER_OFFSET(index) ( DS_UMTS_PDP_PROFILE_TFT_OFFSET +\
          (index * sizeof(ds_umts_tft_params_type)) )

/*===========================================================================

                      PUBLIC DATA DECLARATIONS

===========================================================================*/

/** @} */ /* end_addtogroup dsumtspdpreg */
/** @addtogroup dsumtspdpreg
@{ */

/*===========================================================================
                   EXTERNAL FUNCTION PROTOTYPES
===========================================================================*/
/*===========================================================================
FUNCTION DS_UMTS_PDP_PROFILE_REGISTRY_INIT 
============================================================================*/

/**
  Initializes the PDP profile registry. This initializes the PDP 
  registry critical section. It calls the internal PDP registry initialization
  function.

  @return 
  DS_UMTS_PDP_SUCCESS -- Initialization is successful. \n
  DS_UMTS_PDP_FAIL -- Initialization failed.

  @dependencies 
  Should be called only <i>once</i> during startup.

  @sideeffects 
  Creates the profiles in the EFS if the profiles are not present at startup.
*/

ds_umts_pdp_profile_status_etype ds_umts_pdp_registry_init(void);
/*~ FUNCTION ds_umts_pdp_registry_init
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_ALL_DATA
===========================================================================*/
/**
  Calls the registry internal function to retrieve all the
  parameters associated with a profile number. 

  No check is performed to see if a valid context is defined. The caller must 
  check if the context and associated parameter set is defined and use it
  accordingly.

  @param profile_number [in] Profile number. 
  @param profile_data [out]  Pointer to the stored profile information.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/ 
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_all_data
(
  uint16                   profile_number, 
  ds_umts_pdp_profile_type *profile_data 
);
/*~ FUNCTION ds_umts_get_pdp_profile_all_data
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT profile_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_NAME_UTF16
===========================================================================*/
/**
  Calls the internal registry function to retrieve the name of
  the specified profile number that is stored in UTF16 format. 

  This information can be retrieved even if the context (profile) has
  not been defined.

  @param profile_number [in]        Profile number.
  @param profile_name_buf [out]     Pointer to the stored name string 
                                    (UTF16 string).
  @param profile_name_buf_len [out] Length of the profile_name_buf passed 
                                    (UTF16 words).

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context is not defined for 
                                     profile. \n
  DS_UMTS_PDP_INSUFFICIENT_OUTPUT_BUFFER -- Length of the profile_name_buf is 
                                            shorter than required.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_name_utf16
(
  uint16                profile_number,
  uint16                *profile_name_buf,
  byte                  profile_name_buf_len
);
/*~ FUNCTION ds_umts_get_pdp_profile_name_utf16
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT profile_name_buf VARRAY DS_UMTS_MAX_PROFILE_NAME_LEN+1 LENGTH profile_name_buf_len */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_NAME
===========================================================================*/
/**
  Calls the internal registry function to retrieve the name of
  the specified profile number. 

  @note1 This information can be retrieved even if the context (profile) has
  not been defined.

  @param profile_number [in]        Profile number.
  @param profile_name_buf [out]     Pointer to the stored name string.
  @param profile_name_buf_len [out] Length of the profile_name_buf passed.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file. \n
  DS_UMTS_PDP_INSUFFICIENT_OUTPUT_BUFFER -- Length of the profile_name_buf is 
                                            shorter than required.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_name
(
  uint16                profile_number,
  byte                  *profile_name_buf,
  byte                  profile_name_buf_len
);
/*~ FUNCTION ds_umts_get_pdp_profile_name
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT profile_name_buf VARRAY DS_UMTS_MAX_PROFILE_NAME_LEN+1 LENGTH profile_name_buf_len */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_CONTEXT_INFO
===========================================================================*/
/**
  Calls the registry internal function to retrieve the context
  information for a profile number. 
  This information is retrieved only if the context definition is valid
  (valid_flg for context definition is TRUE).

  @param profile_number [in]    Profile number.
  @param pdp_context_data [out] Pointer to the stored context information.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context is not defined for the 
                                     profile.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_context_info
(
  uint16                    profile_number,
  ds_umts_pdp_context_type  *pdp_context_data
);
/*~ FUNCTION ds_umts_get_pdp_profile_context_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT pdp_context_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_CONTEXT_INFO_IS_VALID
===========================================================================*/
/**
  Calls the registry internal function to retrieve the
  valid_flg specified in the context information for a profile number.
  The valid_flg indicates if the context has been defined (TRUE)
  or not (FALSE).

  @param profile_number [in] Profile number.
  @param valid_flg [out]     Pointer to the stored valid_flg.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_context_info_is_valid
(
  uint16                    profile_number,
  boolean                   *valid_flg
);	
/*~ FUNCTION ds_umts_get_pdp_profile_context_info_is_valid
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT valid_flg POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_CONTEXT_INFO_PDP_ADDRESS
===========================================================================*/
/**
  Calls the registry internal function to retrieve the
  PDP address specified in the context information for a profile number.
  This parameter is retrieved only if a valid context is defined for the
  profile specified.

  @param profile_number [in] Profile number.
  @param pdp_address [out]   Pointer to the stored PDP address.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context is not defined for the 
                                     profile.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  A valid context must have been defined for the profile number.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_context_info_pdp_address
(
  uint16                 profile_number,
  ds_umts_pdp_addr_type  *pdp_address
);
/*~ FUNCTION ds_umts_get_pdp_profile_context_info_pdp_address
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT pdp_address POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_CONTEXT_INFO_APN
===========================================================================*/
/**
  Calls the registry internal function to retrieve the APN 
  specified in the context information for a profile number. This parameter
  is retrieved only if a valid context is defined for the profile specified.

  @param profile_number [in] Profile number.
  @param apn_buf [out]       Pointer to the stored APN string.
  @param apn_buf_len [out]   Length of the buffer pointed to by apn_buf.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context is not defined for 
                                     profile. \n
  DS_UMTS_PDP_INSUFFICIENT_OUTPUT_BUFFER -- Length of the apn_buf is shorter 
                                            than required.
  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  A valid context must have been defined for the profile number.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_context_info_apn
(
  uint16                    profile_number,
  byte                      *apn_buf,
  byte                      apn_buf_len
);
/*~ FUNCTION ds_umts_get_pdp_profile_context_info_apn
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT apn_buf VARRAY DS_UMTS_MAX_APN_STRING_LEN+1 LENGTH apn_buf_len */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_CONTEXT_INFO_IPV4_ADDR_ALLOC
===========================================================================*/
/**
  Calls the registry internal function to retrieve the IPv4
  address allocation mechanism specified in 
  the context information for a profile number. This parameter is retrieved
  only if a valid context is defined for the profile specified.

  @param profile_number [in]   Profile number.
  @param ipv4_addr_alloc [out] Pointer to the stored IPv4 address allocation.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context is not defined for the 
                                     profile.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  A valid context must have been defined for the profile number.
*/
ds_umts_pdp_profile_status_etype 
  ds_umts_get_pdp_profile_context_info_ipv4_addr_alloc
(
  uint16                              profile_number,
  ds_umts_pdp_ipv4_addr_alloc_e_type *ipv4_addr_alloc
);
/*~ FUNCTION ds_umts_get_pdp_profile_context_info_ipv4_addr_alloc
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT ipv4_addr_alloc POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_AUTH_INFO
===========================================================================*/
/**
  Retrieves the authentication information for a profile number.
  The authentication information is returned regardless of the state of the 
  context definition for the profile.

  @param profile_number [in] Profile number.
  @param pdp_auth_data [out] Pointer to the stored authentication information.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_auth_info
(
  uint16                    profile_number,
  ds_umts_pdp_auth_type     *pdp_auth_data
);
/*~ FUNCTION ds_umts_get_pdp_profile_auth_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT pdp_auth_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_AUTH_INFO_TYPE
===========================================================================*/
/**
  Retrieves the authentication type specified in the
  authentication information for a profile number. This parameter is 
  retrieved regardless of the state of the context definition of
  the profile.

  @param profile_number [in] Profile number.
  @param auth_type [out]     Pointer to the stored authentication type.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/

ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_auth_info_type
(
  uint16                     profile_number,
  ds_umts_pdp_auth_enum_type *auth_type
);
/*~ FUNCTION ds_umts_get_pdp_profile_auth_info_type
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT auth_type POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_AUTH_INFO_USERNAME
===========================================================================*/
/**
  Retrieves the username specified in the authentication 
  information for a profile number. This parameter is retrieved 
  regardless of the state of the context definition of the profile.

  @param profile_number [in]    Profile number.
  @param username_buf [out]     Pointer to the stored username string.
  @param username_buf_len [out] Length of the username_buf passed.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file. \n
  DS_UMTS_PDP_INSUFFICIENT_OUTPUT_BUFFER -- Length of the password_buf is 
                                            shorter than required.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_auth_info_username
(
  uint16                     profile_number,
  byte                       *username_buf,
  byte                       username_buf_len
);
/*~ FUNCTION ds_umts_get_pdp_profile_auth_info_username
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT username_buf VARRAY DS_UMTS_MAX_QCPDP_STRING_LEN+1 LENGTH username_buf_len */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_AUTH_INFO_PASSWORD
===========================================================================*/
/**
  Retrieves the password specified in the authentication 
  information for a profile number. This parameter is retrieved 
  regardless of the state of the context definition of the profile.

  @param profile_number [in]    Profile number.
  @param password_buf [out]     Pointer to the stored password string.
  @param password_buf_len [out] Length of the password_buf passed.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file. \n
  DS_UMTS_PDP_INSUFFICIENT_OUTPUT_BUFFER -- Length of the password_buf is 
                                            shorter than required.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_auth_info_password
(
  uint16                     profile_number,
  byte                       *password_buf,
  byte                       password_buf_len
);
/*~ FUNCTION ds_umts_get_pdp_profile_auth_info_password
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT password_buf VARRAY DS_UMTS_MAX_QCPDP_STRING_LEN+1 LENGTH password_buf_len */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_UMTS_QOS_REQ_INFO
===========================================================================*/
/**
  Retrieves the UMTS QoS parameters (requested) specified for a
  profile number. No check is performed to see if a valid context is defined. 
  The caller must check if the context and associated parameter set is 
  defined (valid_flg of QoS is set) and use it accordingly.

  @param profile_number [in]     Profile number.
  @param pdp_umts_qos_data [out] Pointer to the stored QoS parameters.

  @return  
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_umts_qos_req_info
(
  uint16                       profile_number,
  ds_umts_umts_qos_params_type *pdp_umts_qos_data
);
/*~ FUNCTION ds_umts_get_pdp_profile_umts_qos_req_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT pdp_umts_qos_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_UMTS_QOS_MIN_INFO
===========================================================================*/
/**
  Retrieves the UMTS QoS parameters (minimum) specified for a
  profile number. No check is performed to see if a valid context is defined. 
  The caller must check if the context and associated parameter set is 
  defined (valid_flg of QoS is set) and use it accordingly.

  @param profile_number [in]     Profile number.
  @param pdp_umts_qos_data [out] Pointer to the stored QoS parameters.

  @return  
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.
	
  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_umts_qos_min_info
(
  uint16                       profile_number,
  ds_umts_umts_qos_params_type *pdp_umts_qos_data
);
/*~ FUNCTION ds_umts_get_pdp_profile_umts_qos_min_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT pdp_umts_qos_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_GPRS_QOS_REQ_INFO
===========================================================================*/
/**
  Calls the internal registry function to retrieve the GPRS
  requested QoS parameters specified for a profile number.
  No check is performed to see if a valid context is defined. 
  The caller must check if the context and associated parameter set is 
  defined (valid_flg of QoS is set) and use it accordingly.

  @param profile_number [in]         Profile number.
  @param pdp_gprs_qos_req_data [out] Pointer to the stored QoS parameters.

  @return  
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.
	
  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_gprs_qos_req_info
(
  uint16                       profile_number,
  ds_umts_gprs_qos_params_type *pdp_gprs_qos_req_data
);
/*~ FUNCTION ds_umts_get_pdp_profile_gprs_qos_req_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT pdp_gprs_qos_req_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_GPRS_QOS_MIN_INFO
===========================================================================*/
/**
  Calls the internal registry function to retrieve the GPRS
  minimum QoS parameters specified for a profile number. No check is performed
  to see if a valid context is defined. 
  The caller must check if the context and associated parameter set is 
  defined (valid_flg of QoS is set) and use it accordingly.

  @param profile_number [in]         Profile number.
  @param pdp_gprs_qos_min_data [out] Pointer to the stored QoS parameters.

  @return  
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.
	
  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_gprs_qos_min_info
(
  uint16                       profile_number,
  ds_umts_gprs_qos_params_type *pdp_gprs_qos_min_data
);
/*~ FUNCTION ds_umts_get_pdp_profile_gprs_qos_min_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT pdp_gprs_qos_min_data POINTER */

/*===========================================================================
FUNCTION DS_3GPP_GET_PDP_PROFILE_LTE_QOS_INFO
===========================================================================*/
/**
  Calls the internal registry function to retrieve the LTE
  QoS parameters specified for a profile number. No check is performed
  to see if a valid context is defined. 
  The caller must check if the context and associated parameter set is 
  defined (valid_flg of QoS is set) and use it accordingly.

  @param profile_number [in]    Profile number.
  @param pdp_lte_qos_data [out] Pointer to the stored QoS parameters.

  @return  
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.
	
  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_3gpp_get_pdp_profile_lte_qos_info
(
  uint16                       profile_number,
  ds_3gpp_lte_qos_params_type *pdp_lte_qos_data
);
/*~ FUNCTION ds_3gpp_get_pdp_profile_lte_qos_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT pdp_lte_qos_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_TFT_ALL_INFO
===========================================================================*/
/**
  Calls the internal registry function to retrieve <i>all</i> the
  TFT parameters specified for a profile number. No
  check is performed to see if a valid context is defined. The caller is
  responsible for allocating sufficient storage for the returned structure.
  The caller must check if the context and associated parameter set is
  defined (valid_flg of TFT is set) and use it accordingly.

  @param profile_number [in] Profile number.
  @param pdp_tft_data [out]  Pointer to the stored TFT parameters.

  @return  
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.
	
  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.

  @sideeffects 
  Array of size DS_UMTS_MAX_TFT_PARAM_SETS is returned to caller.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_tft_all_info
(
  uint16                       profile_number,
  ds_umts_tft_params_type      *pdp_tft_data
);
/*~ FUNCTION ds_umts_get_pdp_profile_tft_all_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT pdp_tft_data ARRAY DS_UMTS_MAX_TFT_PARAM_SETS */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_TFT_INFO
===========================================================================*/
/**
  Calls the internal registry function to retrieve the TFT parameters 
  specified for a profile number and filter identifier. 
  No check is performed to see if a valid context is defined. The
  caller must check if the context and associated parameter set is defined
  (valid_flg of TFT is set) and use it accordingly.

  @param profile_number [in] Profile number.
  @param filter_id [in]      Filter identifier.
  @param pdp_tft_data [out]  Pointer to the stored TFT parameters.

  @return  
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_INVALID_FILTER_ID -- Invalid filter identifier. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.
	
  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_tft_info
(
  uint16                       profile_number,
  byte                         filter_id,
  ds_umts_tft_params_type      *pdp_tft_data
);
/*~ FUNCTION ds_umts_get_pdp_profile_tft_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT pdp_tft_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_LINGER_PARAMS_INFO
===========================================================================*/
/**
  Calls the internal registry function to retrieve the linger parameters
  specified for the profile number.

  @param profile_number  [in] Profile number.
  @param linger_params_data [out] Pointer to the stored linger parameters.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file system.

  @dependencies 
  ds_umts_pdp_registry_init_flag should be set,  i.e., the registry 
  must have been initialized.
*/

ds_umts_pdp_profile_status_etype ds_umts_get_pdp_profile_linger_params_info
(
  uint16                     profile_number,
  ds_umts_linger_params_type *linger_params_data
);
/*~ FUNCTION ds_umts_get_pdp_profile_linger_params_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT linger_params_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_DNS_ADDRESS_INFO
===========================================================================*/
/**
  Calls the internal registry function to retrieve the DNS
  addresses specified for a profile number. No check is performed to see if a
  valid context is defined. 
  The caller must check if the context and associated parameter set is 
  defined (nonzero DNS address values) and use it accordingly.

  @param profile_number [in] Profile number.
  @param pdp_dns_addr [out]  Pointer to the stored DNS addresses.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
s*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_dns_address_info
(
  uint16                         profile_number,
  ds_umts_pdp_dns_addresses_type *pdp_dns_addr
);
/*~ FUNCTION ds_umts_get_pdp_profile_dns_address_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT pdp_dns_addr POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_DNS_ADDRESS_INFO_PRIMARY
===========================================================================*/
/**

  Calls the internal registry function to retrieve the primary
  DNS address specified for a profile number.
  No check is performed to see if a valid context is defined. 
  The caller must check if the context and associated parameter set is 
  defined (nonzero DNS address) and use it accordingly.

  @param  profile_number [in] Profile number.
  @param  primary_dns [out]   Pointer to the stored DNS address.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_dns_address_info_primary
(
  uint16                  profile_number,
  ds_umts_pdp_addr_type   *primary_dns
);
/*~ FUNCTION ds_umts_get_pdp_profile_dns_address_info_primary
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT primary_dns POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_DNS_ADDRESS_INFO_SECONDARY
===========================================================================*/
/**
  Calls the internal registry function to retrieve the
  secondary DNS address specified for a profile number. No check is 
  performed to see if a valid context is defined. 
  The caller must check if the context and associated parameter set is 
  defined (nonzero DNS address) and use it accordingly.

  @param profile_number [in] Profile number.
  @param secondary_dns [out] Pointer to the stored DNS address.

  @return  
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_dns_address_info_secondary
(
  uint16                  profile_number,
  ds_umts_pdp_addr_type   *secondary_dns
);
/*~ FUNCTION ds_umts_get_pdp_profile_dns_address_info_secondary
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT secondary_dns POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_NUM_FOR_SOCK_CALLS
===========================================================================*/
/**
  Calls the internal registry function to retrieve the profile
  number specified for sockets data calls (sockets calls). The cached
  value is returned if available; otherwise, the read is performed from 
  the EFS file.

  @param profile_number [out] Pointer to the stored profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_num_for_sock_calls
( 
  byte     *profile_number
);
/*~ FUNCTION ds_umts_get_pdp_profile_num_for_sock_calls
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT profile_number POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_NUM_FOR_RMNET_CALLS
===========================================================================*/
/**
  Calls the internal registry function to retrieve the profile
  number specified for RmNet data calls. The cached value is returned if 
  available; otherwise, the read is performed from the EFS file.

  @param profile_number [out] Pointer to the stored profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.
	
  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_num_for_rmnet_calls
( 
  byte     *profile_number
);
/*~ FUNCTION ds_umts_get_pdp_profile_num_for_rmnet_calls
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT profile_number POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_NUM_FOR_EMBEDDED_CALLS
===========================================================================*/
/**
  Calls the internal registry function to retrieve the profile number 
  specified for embedded data calls. The cached value is returned if 
  available; otherwise, the read is performed from the EFS file.

  @param profile_number [out] Pointer to the stored profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_num_for_embedded_calls
( 
  byte     *profile_number
);
/*~ FUNCTION ds_umts_get_pdp_profile_num_for_embedded_calls
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT profile_number POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_NUM_FOR_TETHERED_CALLS
===========================================================================*/
/**
  Calls the internal registry function to retrieve the profile number 
  specified for tethered data calls. The cached value is returned if 
  available; otherwise, the read is performed from the EFS file.

  @param profile_number [out] Pointer to the stored profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_num_for_tethered_calls
( 
  byte     *profile_number
);
/*~ FUNCTION ds_umts_get_pdp_profile_num_for_tethered_calls
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT profile_number POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_NUM_FOR_ATCoP_CALLS
===========================================================================*/
/**
  Calls the internal registry function to retrieve the profile
  number specified for ATCOP data calls. The cached value is returned if 
  available; otherwise, the read is performed from the EFS file.

  @param profile_number [out] Pointer to the stored profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_num_for_atcop_calls
( 
  byte     *profile_number
);
/*~ FUNCTION ds_umts_get_pdp_profile_num_for_atcop_calls
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT profile_number POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_REQUEST_PCSCF_ADDRESS_FLAG
===========================================================================*/
/**
  Calls the internal registry function to retrieve the
  request_pcscf_address_flag specified for a profile.\ This 
  flag indicates whether or not the PCSCF address 
  should be requested for this profile.

  @note1 This information can be retrieved even if the context (profile) has
  not been defined.

  @param profile_number [in]              Profile number.
  @param request_pcscf_address_flag [out] Pointer to the stored 
                                          request_pcscf_address_flag.
  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype 
  ds_umts_get_pdp_profile_request_pcscf_address_flag
(
  uint16                profile_number,
  boolean               *request_pcscf_address_flag
);
/*~ FUNCTION ds_umts_get_pdp_profile_request_pcscf_address_flag
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT request_pcscf_address_flag POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_REQUEST_PCSCF_ADDRESS_USING_DHCP_FLAG
===========================================================================*/
/**
  Calls the internal registry function to retrieve the
  request_pcscf_address_using_dhcp_flag specified for a profile.\ This 
  flag indicates whether or not the PCSCF address
  should be requested for this profile using DHCP.

  @note1 This information can be retrieved even if the context (profile) has
  not been defined.

  @param profile_number [in]                         Profile number.
  @param request_pcscf_address_using_dhcp_flag [out] Pointer to the stored 
                                    request_pcscf_address_using_dhcp_flag.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype 
  ds_umts_get_pdp_profile_request_pcscf_address_using_dhcp_flag
(
  uint16                profile_number,
  boolean               *request_pcscf_address_using_dhcp_flag
);
/*~ FUNCTION ds_umts_get_pdp_profile_request_pcscf_address_using_dhcp_flag
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT request_pcscf_address_using_dhcp_flag POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_IM_CN_FLAG
===========================================================================*/
/**
  Calls the internal registry function to retrieve the
  im_cn_flag specified for a profile.\ This 
  flag indicates whether or not the dedicated context should be
  requested for this profile.

  @note1 This information can be retrieved even if the context (profile) has
  not been defined.

  @param profile_number [in] Profile number.
  @param im_cn_flag [out]    Pointer to the stored im_cn_flag.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype 
  ds_umts_get_pdp_profile_im_cn_flag
(
  uint16                profile_number,
  boolean               *im_cn_flag
);
/*~ FUNCTION ds_umts_get_pdp_profile_im_cn_flag
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT im_cn_flag POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_APN_DISABLE_FLAG
===========================================================================*/

/**
  Calls the registry internal function to retrieve the 
  apn_diable_flag mechanism specified in the context information for a 
  profile number.\ This parameter is retrieved only if a valid context is 
  defined for the profile specified.

  @param profile_number   [in]  Profile number.
  @param apn_disable_flag [out] Pointer to the boolean flag.
   
  @return  
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context is not defined for the 
                                     profile.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  A valid context must have been defined for the profile number.
*/
ds_umts_pdp_profile_status_etype 
  ds_umts_get_pdp_profile_apn_disable_flag
(
  uint16   profile_number,
  boolean  *apn_disable_flag
);
/*~ FUNCTION ds_umts_get_pdp_profile_apn_disable_flag
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT apn_disable_flag POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_INACTIVITY_TIMER_VAL
===========================================================================*/

/**
  Calls the registry internal function to retrieve the 
  inactivity_timer_val value specified in the context information for a 
  profile number.\ This parameter is retrieved only if a valid context is 
  defined for the profile specified.

  @param profile_number       [in]  Profile number.
  @param inactivity_timer_val [out] Pointer to inactivity_timer_val.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context is not defined for the 
                                     profile.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  A valid context must have been defined for the profile number.
*/
ds_umts_pdp_profile_status_etype 
  ds_umts_get_pdp_profile_inactivity_timer_val
(
  uint16   profile_number,
  uint32   *inactivity_timer_val
);
/*~ FUNCTION ds_umts_get_pdp_profile_inactivity_timer_val
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT inactivity_timer_val POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_APN_CLASS
===========================================================================*/

/**
* Calls the registry internal function to retrieve the apn_class
* specified in the profile

  @param profile_number [in]   Profile number.
* @param apn_class [out] Pointer to the APN_CLASS (uint8).
   
  @return  
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context is not defined for the 
                                     profile.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  A valid context must have been defined for the profile number.
*/
ds_umts_pdp_profile_status_etype 
  ds_umts_get_pdp_profile_apn_class
(
  uint16  profile_number,
  uint8   *apn_class
);
/*~ FUNCTION ds_umts_get_pdp_profile_apn_class
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT apn_class POINTER */


/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_OTAP_NAPID
===========================================================================*/
/**
  This function calls the registry internal function to retrieve the NAPID
  of the specified profile number.

  @note1 This information can be retrieved even if the context (profile) has
  not been defined.

  @param profile_number  [in]     Profile number.
  @param otap_napid_buf  [out]    Pointer to the stored NAPID string 
                                  (UTF8 string).
  @param otap_napid_buf_len [out] Length of the otap_napid_buf passed 
                                  (UTF8 bytes).

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM  -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR         -- Error in accessing the file. \n
  DS_UMTS_PDP_INSUFFICIENT_OUTPUT_BUFFER -- Length of the otap_napid_buf is 
                                            shorter than required.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_otap_napid
(
  uint16                profile_number,
  byte                  *otap_napid_buf,
  byte                  otap_napid_buf_len
);
/*~ FUNCTION ds_umts_get_pdp_otap_napid
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT otap_napid_buf VARRAY DS_UMTS_MAX_OTAP_NAPID_LEN+1 LENGTH otap_napid_buf_len */ 

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_IS_READ_ONLY
===========================================================================*/
/**
  Calls the registry internal function to retrieve the
  read_only_flag specified for a profile.\ This 
  flag indicates if the profile is read-only (TRUE) or 
  not (FALSE).

  @note1 This information can be retrieved even if the context (profile) has
  not been defined.

  @param profile_number [in]  Profile number.
  @param read_only_flag [out] Pointer to the stored read_only_flag.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_is_read_only
(
  uint16                profile_number,
  boolean               *read_only_flag
);
/*~ FUNCTION ds_umts_get_pdp_profile_is_read_only
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT read_only_flag POINTER */

/*===========================================================================
FUNCTION DS_UMTS_GET_PDP_PROFILE_IS_OTAP_ENABLED
===========================================================================*/
/**
  Calls the internal registry function to retrieve the
  otap_enabled_flag specified for a profile.\ This
  flag indicates if the context is otap_enabled (TRUE) or 
  not (FALSE).

  @note1 This information can be retrieved even if the context (profile) has
  not been defined.

  @param profile_number [in]     Profile number.
  @param otap_enabled_flag [out] Pointer to the stored otap_enabled_flag.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_pdp_profile_is_otap_enabled
(
  uint16                profile_number,
  boolean               *otap_enabled_flag
);
/*~ FUNCTION ds_umts_get_pdp_profile_is_otap_enabled
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM OUT otap_enabled_flag POINTER */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_NAME_UTF16
===========================================================================*/
/**
  Calls the internal registry function to update the name of a
  profile with the value passed.\ This function also updates the 
  profile name in the cache table.

  The name of the profile can be updated at any time regardless
  of the validity of the context associated with the profile.

  @param profile_number [in]   Profile number.
  @param profile_name_buf [in] Pointer to the name string (UTF16 string).
  @param profile_name_len [in] Length of the name string (UTF16 words).

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_INPUT_BUFFER_LEN_INVALID -- Length of the profile name is 
                                          too long.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_name_utf16
(
  uint16                profile_number,
  const uint16          *profile_name_buf,
  byte                  profile_name_len
);
/*~ FUNCTION ds_umts_set_pdp_profile_name_utf16
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN profile_name_buf VARRAY DS_UMTS_MAX_PROFILE_NAME_LEN+1 LENGTH profile_name_len */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_NAME
===========================================================================*/
/**
  Calls the internal registry function to update the name of a
  profile with the value passed.\ This function also updates the 
  profile name in the cache table.

  The name of the profile can be updated at any time regardless
  of the validity of the context associated with the profile.

  @param profile_number [in]   Profile number.
  @param profile_name_buf [in] Pointer to the name string.
  @param profile_name_len [in] Length of the name string.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_INPUT_BUFFER_LEN_INVALID -- Length of the profile name is 
                                          too long.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_name
(
  uint16                profile_number,
  const byte            *profile_name_buf,
  byte                  profile_name_len
);
/*~ FUNCTION ds_umts_set_pdp_profile_name
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN profile_name_buf VARRAY DS_UMTS_MAX_PROFILE_NAME_LEN+1 LENGTH profile_name_len */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_REQUEST_PCSCF_ADDRESS_FLAG
===========================================================================*/
/**
  Calls the internal registry function to set the
  request_pcscf_address_flag specified for a profile.\ This 
  flag indicates whether or not the PCSCF address should be
  requested for this profile.

  @note1 This information can be retrieved even if the context (profile) has
  not been defined.

  @param profile_number [in]             Profile number.
  @param request_pcscf_address_flag [in] Pointer to the stored 
                                         request_pcscf_address_flag.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.
	
  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype 
  ds_umts_set_pdp_profile_request_pcscf_address_flag
(
  uint16                profile_number,
  boolean               request_pcscf_address_flag
);
/*~ FUNCTION ds_umts_set_pdp_profile_request_pcscf_address_flag
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_REQUEST_PCSCF_ADDRESS_USING_DHCP_FLAG
===========================================================================*/
/**
  Calls the internal registry function to set the
  request_pcscf_address_using_dhcp_flag specified for a profile.\ This 
  flag indicates whether or not the PCSCF address should be
  requested for this profile using DHCP.

  @note1 This information can be retrieved even if the context (profile) has
  not been defined.

  @param profile_number [in]                        Profile number.
  @param request_pcscf_address_using_dhcp_flag [in] Pointer to the stored 
                                   request_pcscf_address_using_dhcp_flag.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype 
  ds_umts_set_pdp_profile_request_pcscf_address_using_dhcp_flag
(
  uint16                profile_number,
  boolean               request_pcscf_address_using_dhcp_flag
);
/*~ FUNCTION ds_umts_set_pdp_profile_request_pcscf_address_using_dhcp_flag
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_IM_CN_FLAG
===========================================================================*/
/**
  Calls the internal registry function to set the
  im_cn_flag specified for a profile.\ This 
  flag indicates whether or not the dedicated PDP context should be
  requested for this profile.

  @note1 This information can be retrieved even if the context (profile) has
  not been defined.

  @param profile_number [in] Profile number.
  @param im_cn_flag [in]     Pointer to the stored im_cn_flag.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype 
  ds_umts_set_pdp_profile_im_cn_flag
(
  uint16                profile_number,
  boolean               im_cn_flag
);
/*~ FUNCTION ds_umts_set_pdp_profile_im_cn_flag
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_APN_DISABLE_FLAG
===========================================================================*/
/**
  This function call the internal registry function to update the apn diable
  flag setting for the profile specified with the value passed. The update 
  can be done ONLY for a valid context as it is part of the context 
  definition. It also updates the cache table with the new value.

  @param profile_number [in] Profile number.
  @param apn_disable_flag [in] Boolean value to set in the registry.

  @dependencies 
  ds_umts_pdp_registry_init_flag should be set(we should have been initialized).
  A valid context must have been defined for the profile number.

  @return
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file system. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context not defined for profile. \n

*/ 
ds_umts_pdp_profile_status_etype 
  ds_umts_set_pdp_profile_apn_disable_flag
(
  uint16   profile_number,
  boolean  apn_disable_flag
);
/*~ FUNCTION ds_umts_set_pdp_profile_apn_disable_flag
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_INACTIVITY_TIMER_VAL
===========================================================================*/
/**
  This function call the internal registry function to update the inactivity
  timer setting for the profile specified with the value passed. The update 
  can be done ONLY for a valid context as it is part of the context 
  definition. It also updates the cache table with the new value.

  @param profile_number [in] Profile number.
  @param inactivity_timer_val [in] Boolean value to set in the registry.

  @dependencies 
  ds_umts_pdp_registry_init_flag should be set(we should have been initialized).
  A valid context must have been defined for the profile number.

  @return
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file system. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context not defined for profile. \n
 
*/

ds_umts_pdp_profile_status_etype 
  ds_umts_set_pdp_profile_inactivity_timer_val
(
  uint16   profile_number,
  uint32   inactivity_timer_val
);
/*~ FUNCTION ds_umts_set_pdp_profile_inactivity_timer_val
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_APN_CLASS
===========================================================================*/

/**
* Calls the registry internal function to set the apn_class for
* a specified profile number.

  @param profile_number [in]   Profile number.
* @param apn_class [in]        APN_CLASS (uint8).
   
  @return  
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in accessing the file. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context is not defined for the 
                                     profile.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  A valid context must have been defined for the profile number.
*/
ds_umts_pdp_profile_status_etype 
  ds_umts_set_pdp_profile_apn_class
(
  uint16   profile_number,
  uint8    apn_class
);
/*~ FUNCTION ds_umts_set_pdp_profile_apn_class
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_CONTEXT_INFO
===========================================================================*/
/**
  Calls the internal registry function to update the context
  definition parameters with the values passed.\ This 
  function also updates the cache table with the new context information.

  @param profile_number [in]   Profile number.
  @param pdp_context_data [in] Pointer to the context definition. 

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_PARMS_VALID_FLAG_NOT_SET -- valid_flg for the context is not 
                                          set to TRUE.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_context_info
(
  uint16                    profile_number,
  const ds_umts_pdp_context_type  *pdp_context_data
);
/*~ FUNCTION ds_umts_set_pdp_profile_context_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN pdp_context_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_CONTEXT_INFO_APN
===========================================================================*/
/**
  Calls the internal registry function to update the APN for
  the profile specified with the value passed.\ This 
  function also updates the cache table with the new APN string.
  
  The APN can be updated <i>only</i> for a 
  valid context, as it is part of the context definition.

  @param profile_number [in] Profile number.
  @param apn_buf  [in]       Pointer to the APN string.
  @param apn_buf_len [in]    Length of the APN string.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context is not defined 
                                     for profile. \n
  DS_UMTS_PDP_INPUT_BUFFER_LEN_INVALID -- Length of the APN string is 
                                          too long.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  A valid context must have been defined for the profile number. 
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_context_info_apn
(
  uint16                    profile_number,
  const byte                *apn_buf,
  byte                      apn_buf_len
);
/*~ FUNCTION ds_umts_set_pdp_profile_context_info_apn
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN apn_buf VARRAY DS_UMTS_MAX_APN_STRING_LEN+1 LENGTH apn_buf_len */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_CONTEXT_INFO_ADDRESS
===========================================================================*/
/**
  Calls the internal registry function to update the PDP
  address for the profile specified with the value passed.\ This
  function also updates the cache table with the new PDP address value.

  The address can be updated <i>only</i> for a 
  valid context, as it is part of the context definition.

  @param profile_number [in] Profile number.
  @param pdp_address [in]    IP address.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context is not defined for the 
                                     profile.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  A valid context must have been defined for the profile number.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_context_info_address
(
  uint16                    profile_number,
  ds_umts_pdp_addr_type     pdp_address
);
/*~ FUNCTION ds_umts_set_pdp_profile_context_info_address
    ONERROR return DS_UMTS_PDP_FAIL */


/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_CONTEXT_INFO_IPV4_ADDR_ALLOC
===========================================================================*/
/**
  Calls the internal registry function to update the IPv4 address 
  allocation setting for the profile specified with the value passed.\ This
  function also updates the cache table with the new value.

  The update can be done <i>only</i> for a 
  valid context, as it is part of the context definition. 

  @param profile_number [in]  Profile number.
  @param ipv4_addr_alloc [in] IPv4 address allocation (mechanism).

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context is not defined for the 
                                     profile.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  A valid context must have been defined for the profile number.
*/
ds_umts_pdp_profile_status_etype 
  ds_umts_set_pdp_profile_context_info_ipv4_addr_alloc
(
  uint16                              profile_number,
  ds_umts_pdp_ipv4_addr_alloc_e_type  ipv4_addr_alloc
);

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_CONTEXT_INFO_TO_DEFAULT
===========================================================================*/
/**
  Sets the context information to be defined for the 
  profile number specified.\ The following values are set for the context:
  - PDP type -- IP
  - IP address -- 0.0.0.0
  - APN -- NULL string
  - Data and header compression -- OFF

  This function can be called by the UI to define a context that sets 
  the profile default and then allows the user to override 
  other fields of the context. 

  @param profile_number [in] Profile number.
  @param ip_vsn [in]         IP version number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_context_info_to_default
(
  uint16                  profile_number,
  ds_ip_version_enum_type ip_vsn
);
/*~ FUNCTION ds_umts_set_pdp_profile_context_info_to_default
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_RESET_PDP_PROFILE_CONTEXT_INFO
===========================================================================*/
/**
  Calls the internal registry function to reset the context
  information to be undefined for the profile number specified.\ This 
  function also resets the context information to be undefined in the cache 
  table.

  It does not overwrite the values of other parameter sets (QoS, auth, etc.).

  @param profile_number [in] Profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.

  @sideeffects 
  The context definition is reset, but all other parameter sets are left
  as is. Auth, QoS, and DNS address values are not changed.
*/
ds_umts_pdp_profile_status_etype  ds_umts_reset_pdp_profile_context_info
(
  uint16                      profile_number
);
/*~ FUNCTION ds_umts_reset_pdp_profile_context_info
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_AUTH_INFO
===========================================================================*/
/**
  Calls the internal registry function to update the
  authentication information with the values passed.\ This function 
  also updates the cache table with the passed authentication information.

  The authentication parameters are updated with the values passed even 
  if a valid context definition is not present. 

  @param profile_number [in] Profile number.
  @param pdp_auth_data [in]  Pointer to an authentication information structure.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_auth_info
(
  uint16                       profile_number,
  const ds_umts_pdp_auth_type  *pdp_auth_data
);
/*~ FUNCTION ds_umts_set_pdp_profile_auth_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN pdp_auth_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_AUTH_INFO_TYPE
===========================================================================*/
/**
  Calls the internal registry function to update the
  authentication type field of authentication information with the value
  passed.\ This function also updates the cache table with the 
  authentication type value.

  The authentication parameters are updated with the values passed 
  even if a valid context definition is not present. 

  @param profile_number [in] Profile number.
  @param auth_type [in]      Authentication type.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_auth_info_type
(
  uint16                     profile_number,
  ds_umts_pdp_auth_enum_type auth_type
);
/*~ FUNCTION ds_umts_set_pdp_profile_auth_info_type
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_AUTH_INFO_USERNAME
===========================================================================*/
/**
  Calls the internal registry function to update the username
  field of authentication information with the value passed.\ This 
  function also updates the cache table with the value passed.

  The authentication parameters are updated with the values passed 
  even if a valid context definition is not present. 

  @param profile_number [in]   Profile number.
  @param usernme_buf [in]      Pointer to the username string.
  @param username_buf_len [in] Length of the username string.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_INPUT_BUFFER_LEN_INVALID -- Length of the username string is 
                                          too long.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_auth_info_username
(
  uint16                    profile_number,
  const byte                *usernme_buf,
  byte                      username_buf_len
);
/*~ FUNCTION ds_umts_set_pdp_profile_auth_info_username
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN usernme_buf VARRAY DS_UMTS_MAX_QCPDP_STRING_LEN+1 LENGTH username_buf_len */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_AUTH_INFO_PASSWORD
===========================================================================*/
/**
  Calls the internal registry function to update the password
  field of authentication information with the value passed.\ This 
  function also updates the cache table with the value passed.

  The authentication parameters are updated with the values passed 
  even if a valid context definition is not present. 

  @param profile_number [in]   Profile number.
  @param password_buf [in]     Pointer to the password string.
  @param password_buf_len [in] Length of the password string.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_INPUT_BUFFER_LEN_INVALID -- Length of the password string is 
                                          too long.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_auth_info_password
(  
  uint16                    profile_number,
  const byte                *password_buf,
  byte                      password_buf_len
);
/*~ FUNCTION ds_umts_set_pdp_profile_auth_info_password
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN password_buf VARRAY DS_UMTS_MAX_QCPDP_STRING_LEN+1 LENGTH password_buf_len */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_AUTH_INFO_TO_DEFAULT
===========================================================================*/
/**
  Calls the internal registry function to reset the
  authentication information for the profile specified.\ Authentication 
  is set to none. 

  The authentication parameters are updated even if 
  a valid context definition is not present. 

  @param profile_number [in] Profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_auth_info_to_default
(
  uint16                      profile_number
);
/*~ FUNCTION ds_umts_set_pdp_profile_auth_info_to_default
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_UMTS_QOS_REQ_INFO
===========================================================================*/
/**
  Calls the internal registry function to update the UMTS
  requested QoS parameters with the values passed. 

  The QoS parameters are updated with the values passed even if a valid 
  context definition is not present. 

  @param profile_number [in]    Profile number.
  @param pdp_umts_qos_data [in] Values with which to update the parameters.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_PARMS_VALID_FLAG_NOT_SET -- Valid flag for the parameters 
                                          is not TRUE.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  valid_flg in the parameter passed should be set to TRUE.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_umts_qos_req_info
(
  uint16                             profile_number,
  const ds_umts_umts_qos_params_type *pdp_umts_qos_data
);
/*~ FUNCTION ds_umts_set_pdp_profile_umts_qos_req_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN pdp_umts_qos_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_RESET_PDP_PROFILE_UMTS_QOS_REQ_INFO 
===========================================================================*/
/** 
  Calls the internal registry function to update the UMTS
  requested QoS parameters for the profile indicated.\ The parameters are
  updated to be subscribed values, and the valid_flg is set to FALSE,
  indicating that the values are not valid.

  The QoS parameters are updated even if a valid context definition 
  is not present. 

  @param profile_number [in] Profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.

  @sideeffects 
  Sets the UMTS QoS (requested) information to be undefined, and all parameters
  are set to subscribed values.
*/
ds_umts_pdp_profile_status_etype  ds_umts_reset_pdp_profile_umts_qos_req_info
(
  uint16                      profile_number
);
/*~ FUNCTION ds_umts_reset_pdp_profile_umts_qos_req_info
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_UMTS_QOS_MIN_INFO
===========================================================================*/
/**
  Calls the internal registry function to update the UMTS
  minimum QoS parameters with the values passed. 

  The QoS parameters are updated with the values passed even if a valid 
  context definition is not present. 

  @param profile_number [in]    Profile number.
  @param pdp_umts_qos_data [in] Values with which to update the parameters.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_PARMS_VALID_FLAG_NOT_SET -- Valid flag for the parameters 
                                          is not TRUE.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  valid_flg in the parameter passed should be set to TRUE.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_umts_qos_min_info
(
  uint16                             profile_number,
  const ds_umts_umts_qos_params_type *pdp_umts_qos_data
);
/*~ FUNCTION ds_umts_set_pdp_profile_umts_qos_min_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN pdp_umts_qos_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_RESET_PDP_PROFILE_UMTS_QOS_MIN_INFO 
===========================================================================*/
/** 
  Calls the internal registry function to update the UMTS
  minimum QoS parameters for the profile indicated.\ The parameters are
  updated to be subscribed values, and the valid_flg is set to FALSE,
  indicating that the values are not valid.

  The QoS parameters are updated even if a valid context definition 
  is not present. 

  @param profile_number [in] Profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.

  @sideeffects 
  Sets the UMTS QoS (minimum) information to be undefined, and all parameters
  are set to subscribed values.
*/
ds_umts_pdp_profile_status_etype  ds_umts_reset_pdp_profile_umts_qos_min_info
(
  uint16                      profile_number
);
/*~ FUNCTION ds_umts_reset_pdp_profile_umts_qos_min_info
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_GPRS_QOS_REQ_INFO
===========================================================================*/
/**
  Calls the internal registry function to update the GPRS
  requested QoS parameters with the values passed.
  
  The QoS parameters are updated with the values passed even if a valid 
  context definition is not present. 

  @param profile_number [in]        Profile number.
  @param pdp_gprs_qos_req_data [in] Values with which to update the parameters. 

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_PARMS_VALID_FLAG_NOT_SET -- Valid flag for the parameters 
                                          is not TRUE.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  valid_flg in the parameter passed should be set to TRUE.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_gprs_qos_req_info
(
  uint16                             profile_number,
  const ds_umts_gprs_qos_params_type *pdp_gprs_qos_req_data
);
/*~ FUNCTION ds_umts_set_pdp_profile_gprs_qos_req_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN pdp_gprs_qos_req_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_RESET_PDP_PROFILE_GPRS_QOS_REQ_INFO 
===========================================================================*/
/** 
  Calls the internal registry function to update the GPRS
  requested QoS parameters for the profile indicated.\ The parameters are
  updated to be subscribed values, and the valid_flg is set to FALSE,
  indicating that the values are not valid.

  The QoS parameters are updated even if a valid context definition 
  is not present. 

  @param profile_number [in] Profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.

  @sideeffects 
  Sets the GPRS QoS (requested) information to be undefined, and all parameters
  are set to subscribed values.
*/
ds_umts_pdp_profile_status_etype  ds_umts_reset_pdp_profile_gprs_qos_req_info
(
  uint16                      profile_number
);
/*~ FUNCTION ds_umts_reset_pdp_profile_gprs_qos_req_info
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_GPRS_QOS_MIN_INFO
===========================================================================*/
/**
  Calls the internal registry function to update the GPRS
  minimum QoS parameters with the values passed. 

  The QoS parameters are updated with the values passed even if a valid 
  context definition is not present. 

  @param profile_number [in]        Profile number.
  @param pdp_gprs_qos_min_data [in] Values with which to update the parameters.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_PARMS_VALID_FLAG_NOT_SET -- Valid flag for the parameters 
                                          is not TRUE.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  valid_flg in the parameter passed should be set to TRUE.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_gprs_qos_min_info
(
  uint16                             profile_number,
  const ds_umts_gprs_qos_params_type *pdp_gprs_qos_min_data
);
/*~ FUNCTION ds_umts_set_pdp_profile_gprs_qos_min_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN pdp_gprs_qos_min_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_RESET_PDP_PROFILE_GPRS_QOS_MIN_INFO
===========================================================================*/
/**
  Calls the internal registry function to update the GPRS 
  minimum QoS required parameters for the profile indicated.\ The
  parameters are updated to be subscribed values, and the valid_flg is set
  to FALSE, indicating that the values are not valid.

  The QoS parameters are updated even if a valid context definition 
  is not present. 

  @param profile_number [in] Profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.

  @sideeffects 
  Sets the GPRS QoS (minimum) information to be undefined, and all parameters 
  are set to subscribed values.
*/
ds_umts_pdp_profile_status_etype  ds_umts_reset_pdp_profile_gprs_qos_min_info
(
  uint16                      profile_number
);
/*~ FUNCTION ds_umts_reset_pdp_profile_gprs_qos_min_info
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_3GPP_SET_PDP_PROFILE_LTE_QOS_INFO
===========================================================================*/
/**
  Calls the internal registry function to update the LTE
  QoS parameters with the values passed. 

  The QoS parameters are updated with the values passed even if a valid 
  context definition is not present. 

  @param profile_number [in] Profile number.
  @param pdp_lte_data [in]   Values with which to update the parameters.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_PARMS_VALID_FLAG_NOT_SET -- Valid flag for the parameters 
                                          is not TRUE.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  valid_flg in the parameter passed should be set to TRUE.
*/
ds_umts_pdp_profile_status_etype  ds_3gpp_set_pdp_profile_lte_qos_info
( 
  uint16                             profile_number,
  const ds_3gpp_lte_qos_params_type *pdp_lte_data
);
/*~ FUNCTION ds_3gpp_set_pdp_profile_lte_qos_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN pdp_lte_data POINTER */

/*===========================================================================
FUNCTION DS_3GPP_RESET_PDP_PROFILE_LTE_QOS_INFO
===========================================================================*/
/**
  Calls the internal registry function to update the LTE 
  QoS requested parameters for the profile indicated.\ The parameters are 
  updated to be subscribed values, and the valid_flg is set
  to FALSE, indicating that the values are not valid.

  The QoS parameters are updated even if a valid context definition 
  is not present. 

  @param profile_number [in] Profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.

  @sideeffects 
  Sets the LTE QoS (requested) information to be undefined, and all parameters 
  are set to subscribed values.
*/
ds_umts_pdp_profile_status_etype  ds_3gpp_reset_pdp_profile_lte_qos_info
(
  uint16                  profile_number
);
/*~ FUNCTION ds_3gpp_reset_pdp_profile_lte_qos_info
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_TFT_INFO
===========================================================================*/
/**
  Calls the internal registry function to update the TFT
  parameters with the values passed for the given filter identifier. 

  The TFT parameters are updated with the values passed even if a valid 
  context definition is not present. 

  @param profile_number [in] Profile number.
  @param filter_id [in]      Filter identifier.
  @param pdp_tft_data [in]   Values with which to update the parameters.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_INVALID_FILTER_ID -- Invalid filter identifier. \n
  DS_UMTS_PDP_PARMS_VALID_FLAG_NOT_SET -- Valid flag for the parameters 
                                          is not TRUE.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  valid_flg in the parameter passed should be set to TRUE.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_tft_info
(
  uint16                         profile_number,
  byte                           filter_id,
  const ds_umts_tft_params_type  *pdp_tft_data
);
/*~ FUNCTION ds_umts_set_pdp_profile_tft_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN pdp_tft_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_TFT_ALL_INFO
===========================================================================*/
/**
  Calls the internal registry function to update the TFT parameters
  with the values passed. The data pointer is assumed to be the
  address of an array of size DS_UMTS_MAX_TFT_PARAM_SETS.

  The TFT parameters are updated with the values passed even if a valid 
  context definition is not present. 

  @param profile_number [in] Profile number.
  @param pdp_tft_data [in]   Values with which to update the parameters;
                             array[DS_UMTS_MAX_TFT_PARAM_SETS].

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_PARMS_VALID_FLAG_NOT_SET -- Valid flag for the parameters
                                          is not TRUE.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized. \n
  valid_flg in the parameter passed should be set to TRUE.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_tft_all_info
(
  uint16                         profile_number,
  const ds_umts_tft_params_type  *pdp_tft_data
);
/*~ FUNCTION ds_umts_set_pdp_profile_tft_all_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN pdp_tft_data ARRAY DS_UMTS_MAX_TFT_PARAM_SETS */

/*===========================================================================
FUNCTION DS_UMTS_RESET_PDP_PROFILE_TFT_ALL_INFO
===========================================================================*/
/**
  Calls the internal registry function to update the TFT required 
  parameters for the profile indicated.\ The parameters are updated
  to zero values, and the valid_flg is set to FALSE,
  indicating that the values are not valid.

  The TFT parameters are updated even if a valid context definition 
  is not present. 

  @param profile_number [in] Profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.

  @sideeffects 
  Sets the TFT information to be undefined, and all parameters 
  are set to zero values.
*/
ds_umts_pdp_profile_status_etype  ds_umts_reset_pdp_profile_tft_all_info
(
  uint16                      profile_number
);
/*~ FUNCTION ds_umts_reset_pdp_profile_tft_all_info
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_LINGER_PARAMS_INFO
===========================================================================*/
/**
  Calls the internal registry function to update the linger parameters
  for the profile indicated.

  @param profile_number [in] Profile number.
  @param linger_params_data [in] Pointer to the linger parameters.

  @return
  DS_UMTS_PDP_SUCCESS -- the operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_PARMS_VALID_FLAG_NOT_SET -- Valid flag for the parameters not set.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/

ds_umts_pdp_profile_status_etype ds_umts_set_pdp_profile_linger_params_info
(
  uint16                           profile_number,
  const ds_umts_linger_params_type *linger_params_data
);
/*~ FUNCTION ds_umts_set_pdp_profile_linger_params_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN linger_params_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_DNS_ADDRESS_INFO
===========================================================================*/
/**
  Calls the internal registry function to update the DNS
  addresses for the profile specified with the values passed.\ This
  function also updates the cache table with the DNS addresses passed.

  The DNS parameters are updated with the values passed even if a valid 
  context definition is not present. 

  @param profile_number [in] Profile number.
  @param pdp_dns_addr [in]   Pointer to the DNS addresses.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_dns_address_info
(
  uint16                               profile_number,
  const ds_umts_pdp_dns_addresses_type *pdp_dns_addr
);
/*~ FUNCTION ds_umts_set_pdp_profile_dns_address_info
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN pdp_dns_addr POINTER */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_DNS_ADDRESS_PRIMARY
===========================================================================*/
/**
  Calls the internal registry function to set the primary DNS
  address for a PDP profile.\ This function also updates 
  the cache table with the primary DNS address value passed.

  The DNS parameters are updated with the values passed even if a valid 
  context definition is not present. 

  @param profile_number [in]   Profile number.
  @param primary_dns_addr [in] DNS address.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_dns_address_primary
(
  uint16                    profile_number,
  ds_umts_pdp_addr_type     primary_dns_addr
);
/*~ FUNCTION ds_umts_set_pdp_profile_dns_address_primary
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_DNS_ADDRESS_SECONDARY
===========================================================================*/
/**
  Calls the internal registry function to set the secondary
  DNS address for a PDP profile.\ This function also updates the 
  cache table with the secondary DNS address value passed.

  The DNS parameters are updated with the
  values passed even if a valid context definition is not present. 

  @param profile_number [in]     Profile number.
  @param secondary_dns_addr [in] DNS address.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_dns_address_secondary
(
  uint16                    profile_number,
  ds_umts_pdp_addr_type     secondary_dns_addr
);
/*~ FUNCTION ds_umts_set_pdp_profile_dns_address_secondary
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_DNS_ADDRESS_INFO_TO_DEFAULT
============================================================================*/
/**
  Calls the internal registry function to set the DNS addresses
  of a PDP profile to default values. The primary and secondary DNS 
  addresses are set to 0.0.0.0.

  The DNS parameters are updated with the values passed even if a valid 
  context definition is not present. 

  @param  profile_number [in] Profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_dns_address_info_to_default
(
  uint16                      profile_number
);
/*~ FUNCTION ds_umts_set_pdp_profile_dns_address_info_to_default
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_ALL_DATA
===========================================================================*/
/**
  Used to call the internal registry function to set all
  the parameters associated with a profile.\ The profile_data_ptr is passed
  in.\ The profile_data_ptr should at least have a valid context for this
  function to update the profile parameters.
 
  @note1 The name of the profile is overwritten with the value passed in 
  the profile.
  @note2: The profile is not modified if read_only_flag is set
  @note3: transience_flag cannot be updated using this API.
 
  @param  profile_number [in] Profile number.
  @param  profile_data [in]   Pointer to the profile data parameters.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_CONTEXT_NOT_DEFINED -- Valid context is not defined for the 
                                     profile.
  
  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_all_data
(
  uint16                    profile_number, 
  ds_umts_pdp_profile_type  *profile_data 
);
/*~ FUNCTION ds_umts_set_pdp_profile_all_data
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN profile_data POINTER */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_ALL_DATA_TO_DEFAULT
===========================================================================*/
/**
  Calls the internal registry function to set the profile
  information to default values for a given profile number.\ This 
  function defines a valid context for the profile (PDP-IP) or PDP-IPv6 
  per ip_vsn, and sets all other parameters to the following default values:
  - Context -- No compression
  - IP address -- 0.0.0.0
  - APN -- NULL
  - Auth -- No authentication
  - QoS -- No QoS parameters are defined (UMTS and GPRS)
  - DNS -- Primary and secondary are set to 0.0.0.0
  - TFT -- No TFT

  @note1 The name of the profile is left as-is.
  @note2 If the profile is valid, transience_flag cannot be updated (API fails). 
         Persistence property can be specified only at profile creation and not 
         updated later. 
  
  @param  profile_number [in] Profile number.
  @param ip_vsn [in]          IP version number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.
 
  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.

  @sideeffects 
  All the profile parameters are overwritten.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_all_data_to_default
(
  uint16                  profile_number,
  ds_ip_version_enum_type ip_vsn
);
/*~ FUNCTION ds_umts_set_pdp_profile_all_data_to_default
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_RESET_PDP_PROFILE_TO_UNDEFINED
===========================================================================*/
/**
  Calls the internal registry function to reset the profile
  specified to undefined values.\ An undefined profile has the 
  following values:
  - Context -- Not defined
  - Authentication information -- None
  - QoS parameters (UMTS and GPRS) -- Not defined
  - DNS addresses -- All addresses are set to 0.0.0.0
  - TFT information -- None

  @note1 The name of the profile is left as-is.

  @param profile_number [in] Profile number to be set to undefined.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.

  @sideeffects 
  All the profile parameters are overwritten.
*/
ds_umts_pdp_profile_status_etype  ds_umts_reset_pdp_profile_to_undefined
(
  uint16                      profile_number
);
/*~ FUNCTION ds_umts_reset_pdp_profile_to_undefined
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_NUM_FOR_SOCK_CALLS
===========================================================================*/
/** 
  Calls the internal registry function to set the profile
  number specified to be used for sockets calls.\ This function writes 
  the value specified to the socks_call_prof_num file.

  @param profile_number [in] Profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_num_for_sock_calls
(
  uint16                  profile_number
);
/*~ FUNCTION ds_umts_set_pdp_profile_num_for_sock_calls
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_NUM_FOR_RMNET_CALLS 
===========================================================================*/ 
/**
  Calls the internal registry function to set the profile
  number specified to be used for RmNet calls.\ This function writes 
  the value specified to the rmnet_call_prof_num file.

  @param profile_number [in] Profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_num_for_rmnet_calls
(
  uint16                  profile_number
);
/*~ FUNCTION ds_umts_set_pdp_profile_num_for_rmnet_calls
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_NUM_FOR_EMBEDDED_CALLS 
===========================================================================*/ 
/**
  Calls the internal registry function to set the profile number specified
  to be used for embedded calls.\ This function writes the value specified
  to the "embedded_call_prof_num" file.

  @param profile_number [in] Profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_num_for_embedded_calls
(
  uint16                  profile_number
);
/*~ FUNCTION ds_umts_set_pdp_profile_num_for_embedded_calls
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_PROFILE_NUM_FOR_TETHERED_CALLS 
===========================================================================*/ 
/**
  Calls the internal registry function to set the profile number specified
  to be used for tethered calls.\ This function writes the value specified
  to the "tethered_call_prof_num" file.

  @param profile_number [in] Profile number.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies 
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_profile_num_for_tethered_calls
(
  uint16                  profile_number
);
/*~ FUNCTION ds_umts_set_pdp_profile_num_for_tethered_calls
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_OTAP_NAPID
===========================================================================*/
/** 
  Calls the internal registry function to update the NAPID of
  a profile with the value passed.\ No check is performed to see 
  if a valid context is defined.\ This function also updates 
  the cache table with the new value.

  @param profile_number [in] Profile number.
  @param otap_napid_buf [in] Pointer to the NAPID string (UTF8 string).
  @param otap_napid_len [in] Length of the NAPID string (UTF8 bytes).

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_INPUT_BUFFER_LEN_INVALID -- Length of the OTAP NAPID is too long.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_otap_napid
(
  uint16                    profile_number,
  byte                      *otap_napid_buf,
  byte                      otap_napid_len
);
/*~ FUNCTION ds_umts_set_pdp_otap_napid
    ONERROR return DS_UMTS_PDP_FAIL */
/*~ PARAM IN otap_napid_buf VARRAY DS_UMTS_MAX_OTAP_NAPID_LEN+1 LENGTH otap_napid_len */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_READ_ONLY_FLAG
===========================================================================*/
/**
  Calls the internal registry function to update the
  read_only_flag of a profile with the value passed.\ No check
  is performed to see if a valid context is defined.\ This function 
  also updates the cache table with the new value.

  @param profile_number [in] Profile number.
  @param read_only_flag [in] Whether the profile is read-only.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_read_only_flag
(
  uint16                    profile_number,
  boolean                   read_only_flag
);
/*~ FUNCTION ds_umts_set_pdp_read_only_flag
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_PDP_OTAP_ENABLED_FLAG
===========================================================================*/
/**
  Calls the internal registry function to update the
  otap_enabled_flag of a profile with the value passed.\ No check
  is performed to see if a valid context is defined.\ This function
  also updates the cache table with the new value.

  @param profile_number [in]    Profile number.
  @param otap_enabled_flag [in] Whether the profile is otap_enabled.

  @return 
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library is not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_pdp_otap_enabled_flag
(
  uint16                    profile_number,
  boolean                   otap_enabled_flag
);

/*~ FUNCTION ds_umts_set_pdp_otap_enabled_flag
    ONERROR return DS_UMTS_PDP_FAIL */

/*===========================================================================
FUNCTION DS_UMTS_SET_DEFAULT_PROFILE_NUMBER_PER_SUBS
===========================================================================*/
/**
  Calls the internal registry function to set the default profile
  number for a Subscription.\ For dual standby there can be
  two active subscriptions and the default profile number should be 
  specified for both subscriptions.\ This API will be called once for each 
  subscription.
 
  @param family [in]          Embedded or Tethered profile family
  @param subs_id [in]         Subscription id
  @param profile_number[in]   Profile number

  @return
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_FAIL -- Failed to finish operation.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_set_default_profile_number_per_subs
(
  ds_umts_profile_family_e_type        family,
  ds_umts_pdp_subs_e_type              subs_id,
  uint16                               profile_number
);

/*===========================================================================
FUNCTION DS_UMTS_GET_DEFAULT_PROFILE_NUMBER_PER_SUBS
===========================================================================*/
/**
  Calls the internal registry function to get the default profile
  number for a given Subscription.\ The cached value is returned if 
  available otherwise, the read is done from the EFS file.
 
  @param family [in]          Embedded or Tethered profile family
  @param subs_id [in]         Subscription id
  @param profile_number[out]  Profile number

  @return
  DS_UMTS_PDP_SUCCESS -- Operation completed successfully. \n
  DS_UMTS_PDP_NOT_INITIALIZED -- Registry API library not initialized. \n
  DS_UMTS_PDP_INVALID_PROFILE_NUM -- Invalid profile number. \n
  DS_UMTS_PDP_ACCESS_ERROR -- Error in updating the file. \n
  DS_UMTS_PDP_FAIL -- Failed to finish operation.

  @dependencies
  ds_umts_pdp_registry_init_flag must be set, i.e., the registry 
  must have been initialized.
*/
ds_umts_pdp_profile_status_etype  ds_umts_get_default_profile_number_per_subs
(
  ds_umts_profile_family_e_type        family,
  ds_umts_pdp_subs_e_type              subs_id,
  uint16                               *profile_number
);

/** @} */ /* end_addtogroup dsumtspdpreg */

#endif /* DSUMTSPDPREG_H */
